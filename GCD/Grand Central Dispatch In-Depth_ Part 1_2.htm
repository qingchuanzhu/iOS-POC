<!DOCTYPE html>
<!-- saved from url=(0074)https://www.raywenderlich.com/60749/grand-central-dispatch-in-depth-part-1 -->
<html lang="en-US" class="chrome"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    <!-- Google Tag Manager -->
    <script async="" type="text/javascript" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/gpt.js"></script><script type="text/javascript" async="" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/cc.js"></script><script type="text/javascript" async="" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/itunes_autolinkmaker.js"></script><script type="text/javascript" async="" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/cse.js"></script><script id="facebook-jssdk" async="" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/all.js"></script><script type="text/javascript" async="" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/analytics.js"></script><script async="" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/gtm.js"></script><script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
      new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
      j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
      'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
      })(window,document,'script','dataLayer','GTM-PT3PDSN');</script>
    <!-- End Google Tag Manager -->

    <script type="text/javascript" lang="en">var rootTag = document.getElementsByTagName("html");var classes = rootTag[0].className;rootTag[0].className = classes.replace("no-js","");if (navigator.appVersion.indexOf("Win")==-1) { classes = rootTag[0].className;rootTag[0].className = classes.replace("windows","") } </script>
    
    <meta property="fb:app_id" content="118196468516511">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>Grand Central Dispatch In-Depth: Part 1/2</title>					<meta name="twitter:card" content="photo">
					<meta name="twitter:site" content="@rwenderlich">
					<meta name="twitter:title" content="Grand Central Dispatch In-Depth: Part 1/2 - Ray Wenderlich">
					<meta name="twitter:description" content="Concurrency is a tough topic. Learn about Grand Central Dispatch in-depth in this two part tutorial series.">
					<meta name="twitter:url" content="https://www.raywenderlich.com/60749/grand-central-dispatch-in-depth-part-1">
					<meta name="twitter:image" content="">
									<meta property="og:title" content="Grand Central Dispatch In-Depth: Part 1/2">
				<meta property="og:type" content="article">
				<meta property="og:site_name" content="Ray Wenderlich">
       		    <meta property="og:url" content="https://www.raywenderlich.com/60749/grand-central-dispatch-in-depth-part-1">
				<meta property="og:description" content="Concurrency is a tough topic. Learn about Grand Central Dispatch in-depth in this two part tutorial series.">
						        <meta property="og:image" content="https://koenig-media.raywenderlich.com/uploads/2014/03/Concurrency_vs_Parallelism.png">
					
<!-- This site is optimized with the Yoast SEO plugin v4.7.1 - https://yoast.com/wordpress/plugins/seo/ -->
<meta name="description" content="Concurrency is a tough topic. Learn about Grand Central Dispatch in-depth in this two part tutorial series.">
<meta name="robots" content="noodp">
<link rel="canonical" href="https://www.raywenderlich.com/60749/grand-central-dispatch-in-depth-part-1">
<!-- / Yoast SEO plugin. -->

<link rel="dns-prefetch" href="https://platform.twitter.com/">
<link rel="dns-prefetch" href="https://s.w.org/">
      <meta name="onesignal" content="wordpress-plugin">
          <link rel="manifest" href="https://www.raywenderlich.com/wp-content/plugins/onesignal-free-web-push-notifications/sdk_files/manifest.json.php?gcm_sender_id=">
          <script src="./Grand Central Dispatch In-Depth_ Part 1_2_files/OneSignalSDK.js" async=""></script>    <script>

      window.OneSignal = window.OneSignal || [];

      OneSignal.push( function() {
        OneSignal.SERVICE_WORKER_UPDATER_PATH = "OneSignalSDKUpdaterWorker.js.php";
        OneSignal.SERVICE_WORKER_PATH = "OneSignalSDKWorker.js.php";
        OneSignal.SERVICE_WORKER_PARAM = { scope: '/' };

        OneSignal.setDefaultNotificationUrl("https://www.raywenderlich.com");
        var oneSignal_options = {};
        window._oneSignalInitOptions = oneSignal_options;

        oneSignal_options['wordpress'] = true;
oneSignal_options['appId'] = '653ee6c3-c5e0-440f-9532-0f7d561ae5be';
oneSignal_options['autoRegister'] = true;
oneSignal_options['httpPermissionRequest'] = { };
oneSignal_options['httpPermissionRequest']['enable'] = true;
oneSignal_options['welcomeNotification'] = { };
oneSignal_options['welcomeNotification']['title'] = "raywenderlich.com";
oneSignal_options['welcomeNotification']['message'] = "Thanks — we’ll keep you up-to-date with the latest happenings on the site!";
oneSignal_options['welcomeNotification']['url'] = "https://www.raywenderlich.com";
oneSignal_options['path'] = "https://www.raywenderlich.com/wp-content/plugins/onesignal-free-web-push-notifications/sdk_files/";
oneSignal_options['safari_web_id'] = "web.onesignal.auto.08b05e7f-114b-4b4f-a485-263bca659097";
oneSignal_options['promptOptions'] = { };
oneSignal_options['notifyButton'] = { };
oneSignal_options['notifyButton']['enable'] = true;
oneSignal_options['notifyButton']['position'] = 'bottom-right';
oneSignal_options['notifyButton']['theme'] = 'default';
oneSignal_options['notifyButton']['size'] = 'medium';
oneSignal_options['notifyButton']['prenotify'] = true;
oneSignal_options['notifyButton']['showCredit'] = false;
oneSignal_options['notifyButton']['text'] = {};
oneSignal_options['notifyButton']['colors'] = {};
oneSignal_options['notifyButton']['colors']['circle.background'] = '#006837';
oneSignal_options['notifyButton']['colors']['dialog.button.background'] = '#000000';
oneSignal_options['notifyButton']['colors']['dialog.button.background.hovering'] = '#006837';
oneSignal_options['notifyButton']['colors']['dialog.button.background.active'] = '#006837';
              oneSignal_options['autoRegister'] = false;
              OneSignal.showHttpPrompt();
              OneSignal.init(window._oneSignalInitOptions);
                    });

      function documentInitOneSignal() {
        var oneSignal_elements = document.getElementsByClassName("OneSignal-prompt");

        var oneSignalLinkClickHandler = function(event) { OneSignal.push(['registerForPushNotifications']); event.preventDefault(); };        for(var i = 0; i < oneSignal_elements.length; i++)
          oneSignal_elements[i].addEventListener('click', oneSignalLinkClickHandler, false);
      }

      if (document.readyState === 'complete') {
           documentInitOneSignal();
      }
      else {
           window.addEventListener("load", function(event){
               documentInitOneSignal();
          });
      }
    </script>

		<script type="text/javascript">
			window._wpemojiSettings = {"baseUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.2.1\/72x72\/","ext":".png","svgUrl":"https:\/\/s.w.org\/images\/core\/emoji\/2.2.1\/svg\/","svgExt":".svg","source":{"concatemoji":"https:\/\/www.raywenderlich.com\/wp-includes\/js\/wp-emoji-release.min.js?ver=4.7.5"}};
			!function(a,b,c){function d(a){var b,c,d,e,f=String.fromCharCode;if(!k||!k.fillText)return!1;switch(k.clearRect(0,0,j.width,j.height),k.textBaseline="top",k.font="600 32px Arial",a){case"flag":return k.fillText(f(55356,56826,55356,56819),0,0),!(j.toDataURL().length<3e3)&&(k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57331,65039,8205,55356,57096),0,0),b=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55356,57331,55356,57096),0,0),c=j.toDataURL(),b!==c);case"emoji4":return k.fillText(f(55357,56425,55356,57341,8205,55357,56507),0,0),d=j.toDataURL(),k.clearRect(0,0,j.width,j.height),k.fillText(f(55357,56425,55356,57341,55357,56507),0,0),e=j.toDataURL(),d!==e}return!1}function e(a){var c=b.createElement("script");c.src=a,c.defer=c.type="text/javascript",b.getElementsByTagName("head")[0].appendChild(c)}var f,g,h,i,j=b.createElement("canvas"),k=j.getContext&&j.getContext("2d");for(i=Array("flag","emoji4"),c.supports={everything:!0,everythingExceptFlag:!0},h=0;h<i.length;h++)c.supports[i[h]]=d(i[h]),c.supports.everything=c.supports.everything&&c.supports[i[h]],"flag"!==i[h]&&(c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&c.supports[i[h]]);c.supports.everythingExceptFlag=c.supports.everythingExceptFlag&&!c.supports.flag,c.DOMReady=!1,c.readyCallback=function(){c.DOMReady=!0},c.supports.everything||(g=function(){c.readyCallback()},b.addEventListener?(b.addEventListener("DOMContentLoaded",g,!1),a.addEventListener("load",g,!1)):(a.attachEvent("onload",g),b.attachEvent("onreadystatechange",function(){"complete"===b.readyState&&c.readyCallback()})),f=c.source||{},f.concatemoji?e(f.concatemoji):f.wpemoji&&f.twemoji&&(e(f.twemoji),e(f.wpemoji)))}(window,document,window._wpemojiSettings);
		</script>
		<style type="text/css">
img.wp-smiley,
img.emoji {
	display: inline !important;
	border: none !important;
	box-shadow: none !important;
	height: 1em !important;
	width: 1em !important;
	margin: 0 .07em !important;
	vertical-align: -0.1em !important;
	background: none !important;
	padding: 0 !important;
}
</style>
<link rel="stylesheet" id="style-main-css" href="./Grand Central Dispatch In-Depth_ Part 1_2_files/style.min.css" type="text/css" media="all">
<link rel="stylesheet" id="highlight.js-css" href="./Grand Central Dispatch In-Depth_ Part 1_2_files/highlight.js.atom-one-light.min.css" type="text/css" media="all">
<link rel="stylesheet" id="swiftype-css" href="./Grand Central Dispatch In-Depth_ Part 1_2_files/autocomplete.css" type="text/css" media="all">
<link rel="stylesheet" id="wp-pagenavi-css" href="./Grand Central Dispatch In-Depth_ Part 1_2_files/pagenavi-css.css" type="text/css" media="all">
<script type="text/javascript">
/* <![CDATA[ */
var swiftypeParams = {"engineKey":"omdTFN4ka9Dq1GBywQZq"};
/* ]]> */
</script>
<script type="text/javascript" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/install_swiftype.min.js"></script>
<script type="text/javascript" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/jquery.js"></script>
<script type="text/javascript" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/jquery-migrate.min.js"></script>
<script type="text/javascript" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/global_combined.1.0.15.js"></script><script type="text/javascript" async="" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/a.min.js"></script>
<script type="text/javascript" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/easy-spoiler.js"></script>
<link rel="https://api.w.org/" href="https://www.raywenderlich.com/wp-json/">
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="https://www.raywenderlich.com/xmlrpc.php?rsd">
<link rel="wlwmanifest" type="application/wlwmanifest+xml" href="https://koenig-assets.raywenderlich.com/wp-includes/wlwmanifest.xml"> 
<meta name="generator" content="WordPress 4.7.5">
<link rel="shortlink" href="https://www.raywenderlich.com/?p=60749">
<link rel="alternate" type="application/json+oembed" href="https://www.raywenderlich.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.raywenderlich.com%2F60749%2Fgrand-central-dispatch-in-depth-part-1">
<link rel="alternate" type="text/xml+oembed" href="https://www.raywenderlich.com/wp-json/oembed/1.0/embed?url=https%3A%2F%2Fwww.raywenderlich.com%2F60749%2Fgrand-central-dispatch-in-depth-part-1&amp;format=xml">
<link type="text/css" rel="stylesheet" href="./Grand Central Dispatch In-Depth_ Part 1_2_files/easy-spoiler.css"><script type="text/javascript"><!--
function powerpress_pinw(pinw_url){window.open(pinw_url, 'PowerPressPlayer','toolbar=0,status=0,resizable=1,width=460,height=320');	return false;}
//-->
</script>
<style type="text/css">
/* <![CDATA[ */
img.latex { vertical-align: middle; border: none; }
/* ]]> */
</style>
    <link rel="stylesheet" href="./Grand Central Dispatch In-Depth_ Part 1_2_files/print.css" type="text/css" media="print">
    <link rel="profile" href="http://gmpg.org/xfn/11">
    <link rel="pingback" href="https://www.raywenderlich.com/xmlrpc.php">
    <script>var siteUrl = 'https://koenig-assets.raywenderlich.com/wp-content/themes/raywenderlich'</script>

    <noscript>&lt;img height="1" width="1" alt="" style="display:none" src="https://www.facebook.com/tr?id=915433011818742&amp;amp;ev=PixelInitialized" /&gt;</noscript>
    <style>.single article.post img { max-width:100%; }</style>
  <script type="text/javascript" async="" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/bsa.js"></script><script type="text/javascript" async="" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/embed.js"></script><script type="text/javascript" charset="utf-8" async="" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/button.fbaa419ee3b1f63d563b4dc1677c1aa4.js"></script><script type="text/javascript" id="_bsap_js_39fcef7ed4520883d78f129c33995fd2" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/s_39fcef7ed4520883d78f129c33995fd2.js" async="async"></script><script src="./Grand Central Dispatch In-Depth_ Part 1_2_files/jsapi" type="text/javascript"></script><script type="text/javascript" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/pro.js" id="_bsap_premium_pro"></script><link type="text/css" href="./Grand Central Dispatch In-Depth_ Part 1_2_files/default+en.css" rel="stylesheet"><link type="text/css" href="./Grand Central Dispatch In-Depth_ Part 1_2_files/default.css" rel="stylesheet"><script type="text/javascript" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/default+en.I.js"></script><script type="text/javascript" id="_bsaPRO_js" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/saved_resource" async="async"></script><link rel="stylesheet" href="./Grand Central Dispatch In-Depth_ Part 1_2_files/OneSignalSDKStyles.css"><script src="./Grand Central Dispatch In-Depth_ Part 1_2_files/pubads_impl_119.js" async=""></script><style type="text/css">
.gsc-control-cse {
font-family: Arial, sans-serif;
border-color: #FFFFFF;
background-color: #FFFFFF;
}
.gsc-control-cse .gsc-table-result {
font-family: Arial, sans-serif;
}
input.gsc-input, .gsc-input-box, .gsc-input-box-hover, .gsc-input-box-focus {
border-color: #BCCDF0;
}
input.gsc-search-button, input.gsc-search-button:hover, input.gsc-search-button:focus {
border-color: #336699;
background-color: #E9E9E9;
background-image: none;
filter: none;
}
.gsc-tabHeader.gsc-tabhInactive {
border-color: #E9E9E9;
background-color: #E9E9E9;
}
.gsc-tabHeader.gsc-tabhActive {
border-color: #FF9900;
border-bottom-color: #FFFFFF;
background-color: #FFFFFF;
}
.gsc-tabsArea {
border-color: #FF9900;
}
.gsc-webResult.gsc-result,
.gsc-results .gsc-imageResult {
border-color: #FFFFFF;
background-color: #FFFFFF;
}
.gsc-webResult.gsc-result:hover,
.gsc-imageResult:hover {
border-color: #FFFFFF;
background-color: #FFFFFF;
}
.gs-webResult.gs-result a.gs-title:link,
.gs-webResult.gs-result a.gs-title:link b,
.gs-imageResult a.gs-title:link,
.gs-imageResult a.gs-title:link b {
color: #1155CC;
}
.gs-webResult.gs-result a.gs-title:visited,
.gs-webResult.gs-result a.gs-title:visited b,
.gs-imageResult a.gs-title:visited,
.gs-imageResult a.gs-title:visited b {
color: #1155CC;
}
.gs-webResult.gs-result a.gs-title:hover,
.gs-webResult.gs-result a.gs-title:hover b,
.gs-imageResult a.gs-title:hover,
.gs-imageResult a.gs-title:hover b {
color: #1155CC;
}
.gs-webResult.gs-result a.gs-title:active,
.gs-webResult.gs-result a.gs-title:active b,
.gs-imageResult a.gs-title:active,
.gs-imageResult a.gs-title:active b {
color: #1155CC;
}
.gsc-cursor-page {
color: #1155CC;
}
a.gsc-trailing-more-results:link {
color: #1155CC;
}
.gs-webResult .gs-snippet,
.gs-imageResult .gs-snippet,
.gs-fileFormatType {
color: #333333;
}
.gs-webResult div.gs-visibleUrl,
.gs-imageResult div.gs-visibleUrl {
color: #009933;
}
.gs-webResult div.gs-visibleUrl-short {
color: #009933;
}
.gs-webResult div.gs-visibleUrl-short {
display: none;
}
.gs-webResult div.gs-visibleUrl-long {
display: block;
}
.gs-promotion div.gs-visibleUrl-short {
display: none;
}
.gs-promotion div.gs-visibleUrl-long {
display: block;
}
.gsc-cursor-box {
border-color: #FFFFFF;
}
.gsc-results .gsc-cursor-box .gsc-cursor-page {
border-color: #E9E9E9;
background-color: #FFFFFF;
color: #1155CC;
}
.gsc-results .gsc-cursor-box .gsc-cursor-current-page {
border-color: #FF9900;
background-color: #FFFFFF;
color: #1155CC;
}
.gsc-webResult.gsc-result.gsc-promotion {
border-color: #336699;
background-color: #FFFFFF;
}
.gsc-completion-title {
color: #1155CC;
}
.gsc-completion-snippet {
color: #333333;
}
.gs-promotion a.gs-title:link,
.gs-promotion a.gs-title:link *,
.gs-promotion .gs-snippet a:link {
color: #0000FF;
}
.gs-promotion a.gs-title:visited,
.gs-promotion a.gs-title:visited *,
.gs-promotion .gs-snippet a:visited {
color: #663399;
}
.gs-promotion a.gs-title:hover,
.gs-promotion a.gs-title:hover *,
.gs-promotion .gs-snippet a:hover {
color: #0000FF;
}
.gs-promotion a.gs-title:active,
.gs-promotion a.gs-title:active *,
.gs-promotion .gs-snippet a:active {
color: #0000FF;
}
.gs-promotion .gs-snippet,
.gs-promotion .gs-title .gs-promotion-title-right,
.gs-promotion .gs-title .gs-promotion-title-right * {
color: #000000;
}
.gs-promotion .gs-visibleUrl,
.gs-promotion .gs-visibleUrl-short {
color: #008000;
}</style><link rel="prefetch" href="https://tpc.googlesyndication.com/safeframe/1-0-8/html/container.html"><style type="text/css">.fb_hidden{position:absolute;top:-10000px;z-index:10001}.fb_reposition{overflow:hidden;position:relative}.fb_invisible{display:none}.fb_reset{background:none;border:0;border-spacing:0;color:#000;cursor:auto;direction:ltr;font-family:"lucida grande", tahoma, verdana, arial, sans-serif;font-size:11px;font-style:normal;font-variant:normal;font-weight:normal;letter-spacing:normal;line-height:1;margin:0;overflow:visible;padding:0;text-align:left;text-decoration:none;text-indent:0;text-shadow:none;text-transform:none;visibility:visible;white-space:normal;word-spacing:normal}.fb_reset>div{overflow:hidden}.fb_link img{border:none}@keyframes fb_transform{from{opacity:0;transform:scale(.95)}to{opacity:1;transform:scale(1)}}.fb_animate{animation:fb_transform .3s forwards}
.fb_dialog{background:rgba(82, 82, 82, .7);position:absolute;top:-10000px;z-index:10001}.fb_reset .fb_dialog_legacy{overflow:visible}.fb_dialog_advanced{padding:10px;-moz-border-radius:8px;-webkit-border-radius:8px;border-radius:8px}.fb_dialog_content{background:#fff;color:#333}.fb_dialog_close_icon{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 0 transparent;cursor:pointer;display:block;height:15px;position:absolute;right:18px;top:17px;width:15px}.fb_dialog_mobile .fb_dialog_close_icon{top:5px;left:5px;right:auto}.fb_dialog_padding{background-color:transparent;position:absolute;width:1px;z-index:-1}.fb_dialog_close_icon:hover{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -15px transparent}.fb_dialog_close_icon:active{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yq/r/IE9JII6Z1Ys.png) no-repeat scroll 0 -30px transparent}.fb_dialog_loader{background-color:#f6f7f9;border:1px solid #606060;font-size:24px;padding:20px}.fb_dialog_top_left,.fb_dialog_top_right,.fb_dialog_bottom_left,.fb_dialog_bottom_right{height:10px;width:10px;overflow:hidden;position:absolute}.fb_dialog_top_left{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 0;left:-10px;top:-10px}.fb_dialog_top_right{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -10px;right:-10px;top:-10px}.fb_dialog_bottom_left{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -20px;bottom:-10px;left:-10px}.fb_dialog_bottom_right{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ye/r/8YeTNIlTZjm.png) no-repeat 0 -30px;right:-10px;bottom:-10px}.fb_dialog_vert_left,.fb_dialog_vert_right,.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{position:absolute;background:#525252;filter:alpha(opacity=70);opacity:.7}.fb_dialog_vert_left,.fb_dialog_vert_right{width:10px;height:100%}.fb_dialog_vert_left{margin-left:-10px}.fb_dialog_vert_right{right:0;margin-right:-10px}.fb_dialog_horiz_top,.fb_dialog_horiz_bottom{width:100%;height:10px}.fb_dialog_horiz_top{margin-top:-10px}.fb_dialog_horiz_bottom{bottom:0;margin-bottom:-10px}.fb_dialog_iframe{line-height:0}.fb_dialog_content .dialog_title{background:#6d84b4;border:1px solid #365899;color:#fff;font-size:14px;font-weight:bold;margin:0}.fb_dialog_content .dialog_title>span{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/yd/r/Cou7n-nqK52.gif) no-repeat 5px 50%;float:left;padding:5px 0 7px 26px}body.fb_hidden{-webkit-transform:none;height:100%;margin:0;overflow:visible;position:absolute;top:-10000px;left:0;width:100%}.fb_dialog.fb_dialog_mobile.loading{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/ya/r/3rhSv5V8j3o.gif) white no-repeat 50% 50%;min-height:100%;min-width:100%;overflow:hidden;position:absolute;top:0;z-index:10001}.fb_dialog.fb_dialog_mobile.loading.centered{width:auto;height:auto;min-height:initial;min-width:initial;background:none}.fb_dialog.fb_dialog_mobile.loading.centered #fb_dialog_loader_spinner{width:100%}.fb_dialog.fb_dialog_mobile.loading.centered .fb_dialog_content{background:none}.loading.centered #fb_dialog_loader_close{color:#fff;display:block;padding-top:20px;clear:both;font-size:18px}#fb-root #fb_dialog_ipad_overlay{background:rgba(0, 0, 0, .45);position:absolute;bottom:0;left:0;right:0;top:0;width:100%;min-height:100%;z-index:10000}#fb-root #fb_dialog_ipad_overlay.hidden{display:none}.fb_dialog.fb_dialog_mobile.loading iframe{visibility:hidden}.fb_dialog_content .dialog_header{-webkit-box-shadow:white 0 1px 1px -1px inset;background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#738ABA), to(#2C4987));border-bottom:1px solid;border-color:#1d4088;color:#fff;font:14px Helvetica, sans-serif;font-weight:bold;text-overflow:ellipsis;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0;vertical-align:middle;white-space:nowrap}.fb_dialog_content .dialog_header table{-webkit-font-smoothing:subpixel-antialiased;height:43px;width:100%}.fb_dialog_content .dialog_header td.header_left{font-size:12px;padding-left:5px;vertical-align:middle;width:60px}.fb_dialog_content .dialog_header td.header_right{font-size:12px;padding-right:5px;vertical-align:middle;width:60px}.fb_dialog_content .touchable_button{background:-webkit-gradient(linear, 0% 0%, 0% 100%, from(#4966A6), color-stop(.5, #355492), to(#2A4887));border:1px solid #29487d;-webkit-background-clip:padding-box;-webkit-border-radius:3px;-webkit-box-shadow:rgba(0, 0, 0, .117188) 0 1px 1px inset, rgba(255, 255, 255, .167969) 0 1px 0;display:inline-block;margin-top:3px;max-width:85px;line-height:18px;padding:4px 12px;position:relative}.fb_dialog_content .dialog_header .touchable_button input{border:none;background:none;color:#fff;font:12px Helvetica, sans-serif;font-weight:bold;margin:2px -12px;padding:2px 6px 3px 6px;text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog_content .dialog_header .header_center{color:#fff;font-size:16px;font-weight:bold;line-height:18px;text-align:center;vertical-align:middle}.fb_dialog_content .dialog_content{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat 50% 50%;border:1px solid #555;border-bottom:0;border-top:0;height:150px}.fb_dialog_content .dialog_footer{background:#f6f7f9;border:1px solid #555;border-top-color:#ccc;height:40px}#fb_dialog_loader_close{float:left}.fb_dialog.fb_dialog_mobile .fb_dialog_close_button{text-shadow:rgba(0, 30, 84, .296875) 0 -1px 0}.fb_dialog.fb_dialog_mobile .fb_dialog_close_icon{visibility:hidden}#fb_dialog_loader_spinner{animation:rotateSpinner 1.2s linear infinite;background-color:transparent;background-image:url(https://static.xx.fbcdn.net/rsrc.php/v3/yD/r/t-wz8gw1xG1.png);background-repeat:no-repeat;background-position:50% 50%;height:24px;width:24px}@keyframes rotateSpinner{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}
.fb_iframe_widget{display:inline-block;position:relative}.fb_iframe_widget span{display:inline-block;position:relative;text-align:justify}.fb_iframe_widget iframe{position:absolute}.fb_iframe_widget_fluid_desktop,.fb_iframe_widget_fluid_desktop span,.fb_iframe_widget_fluid_desktop iframe{max-width:100%}.fb_iframe_widget_fluid_desktop iframe{min-width:220px;position:relative}.fb_iframe_widget_lift{z-index:1}.fb_hide_iframes iframe{position:relative;left:-10000px}.fb_iframe_widget_loader{position:relative;display:inline-block}.fb_iframe_widget_fluid{display:inline}.fb_iframe_widget_fluid span{width:100%}.fb_iframe_widget_loader iframe{min-height:32px;z-index:2;zoom:1}.fb_iframe_widget_loader .FB_Loader{background:url(https://static.xx.fbcdn.net/rsrc.php/v3/y9/r/jKEcVPZFk-2.gif) no-repeat;height:32px;width:32px;margin-left:-16px;position:absolute;left:50%;z-index:4}</style></head>
  <body class="post-template-default single single-post postid-60749 single-format-standard">
    <!-- BuySellAds Ad Code -->
    <script type="text/javascript">
    (function(){
      var bsa = document.createElement('script');
         bsa.type = 'text/javascript';
         bsa.async = true;
         bsa.src = '//s3.buysellads.com/ac/bsa.js';
      (document.getElementsByTagName('head')[0]||document.getElementsByTagName('body')[0]).appendChild(bsa);
    })();
    </script>
    <!-- End BuySellAds Ad Code -->
    <script>(function(d, s, id) {
      var js, fjs = d.getElementsByTagName(s)[0];
      if (d.getElementById(id)) return;
      js = d.createElement(s); js.id = id;
      js.src = "//connect.facebook.net/en_US/sdk.js#xfbml=1&version=v2.5&appId=118196468516511";
      fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));</script>
    <!-- Google Tag Manager (noscript) -->
    <noscript>&lt;iframe src="https://www.googletagmanager.com/ns.html?id=GTM-PT3PDSN"
    height="0" width="0" style="display:none;visibility:hidden"&gt;&lt;/iframe&gt;</noscript>
    <!-- End Google Tag Manager (noscript) -->

    <div id="wrapper">
      <header id="branding" class="rw_subservice">
        <div id="main-header">
          <div id="top-sales-banner" style="display: block;">
            <p><a href="https://videos.raywenderlich.com/courses" id="sub-banner-top" sl-processed="1">Skip the reading — <span>click here</span> for our massive collection of video courses</a></p>
            <button><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/close.svg" alt="close"></button>
          </div>

          <div class="block">
            <nav id="top">
              <ul id="main-nav">
                <li class="logo-col no-padding">
                  <div class="logo-left">
                    <a href="https://www.raywenderlich.com/" sl-processed="1"></a>
                  </div>
                </li>

                <li class="mobile-menu-toggle">
                  <div>
                    <button id="toggle-menu" aria-label="Mobile menu"><i class="icon-menu_icon_dash" aria-hidden="true"></i></button>
                  </div>
                </li>
                      
                <li id="main-links">  
                  <aside id="search-view" class="grow-wide">
                    <form action="https://www.raywenderlich.com/" id="nav-search" method="get">
                      <input type="search" placeholder="Search" id="nav-search-box" name="s" autocomplete="off">
                      <input type="hidden" name="cof" value="FORID:10">
                      <button id="search-submit-mobile" type="submit" aria-label="Submit search">
                        <svg version="1.1" id="svg-search-mobile" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="22px" height="20px" viewBox="0 0 34 32" enable-background="new 0 0 34 32" xml:space="preserve" aria-hidden="true">
                          <path d="M32.128,30.048l-5.312-5.312c-0.032-0.032-0.032-0.032-0.032-0.032l-1.728-1.728c1.983-2.4,3.168-5.504,3.168-8.865
                                C28.225,6.336,21.889,0,14.112,0C6.336,0,0,6.336,0,14.112c0,7.777,6.336,14.113,14.112,14.113c3.712,0,7.041-1.44,9.568-3.776
                                l5.088,5.088c0.032,0.032,0.032,0.032,0.032,0.032l1.921,1.92c0.479,0.447,1.184,0.544,1.567,0.128
                                C32.672,31.232,32.607,30.527,32.128,30.048L32.128,30.048z M14.112,26.24c-6.688,0-12.128-5.44-12.128-12.128
                                S7.424,1.984,14.112,1.984S26.24,7.424,26.24,14.112S20.8,26.24,14.112,26.24L14.112,26.24z"></path>
                        </svg>
                      </button>
                    </form>
                  </aside>
                  <ul>
                    <li class="padding-left">
                                            <a href="https://www.raywenderlich.com/" class="top-level-link active" sl-processed="1">
                        Tutorials<svg version="1.1" class="svg-angle-down" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="9px" height="9px" viewBox="1.376 11.648 17.824 10.4" enable-background="new 1.376 11.648 17.824 10.4" xml:space="preserve" aria-hidden="true">
                          <path d="M19.2,13.152c0,0.149-0.063,0.288-0.192,0.416l-8.32,8.321c-0.106,0.105-0.245,0.159-0.416,0.159
                          c-0.17,0-0.299-0.054-0.384-0.159l-8.32-8.321c-0.128-0.128-0.192-0.267-0.192-0.416s0.064-0.288,0.192-0.416l0.864-0.896
                          c0.128-0.128,0.267-0.192,0.416-0.192s0.288,0.064,0.416,0.192l7.008,7.008l7.041-7.008c0.105-0.128,0.244-0.192,0.416-0.192
                          c0.17,0,0.299,0.064,0.383,0.192l0.896,0.896C19.137,12.843,19.2,12.981,19.2,13.152z"></path>
                        </svg>
                      </a>
                      <ul class="dropdown-menu written-dropdown slighter-fade-up">
                        <li><a href="https://www.raywenderlich.com/swift-language-tutorials" sl-processed="1"><i class="category-icon cat-1" aria-hidden="true"></i><span>Swift</span></a></li>
                        <li><a href="https://www.raywenderlich.com/ios-tutorials" sl-processed="1"><i class="category-icon cat-2" aria-hidden="true"></i><span>iOS</span></a></li>
                        <li><a href="https://www.raywenderlich.com/android-tutorials" sl-processed="1"><i class="category-icon cat-3" aria-hidden="true"></i><span>Android</span></a></li>
                        <li><a href="https://www.raywenderlich.com/macos-tutorials" sl-processed="1"><i class="category-icon cat-4" aria-hidden="true"></i><span>macOS</span></a></li>
                        <li><a href="https://www.raywenderlich.com/apple-game-frameworks-tutorials" sl-processed="1"><i class="category-icon cat-5" aria-hidden="true"></i><span>Apple Game Frameworks</span></a></li>
                        <li><a href="https://www.raywenderlich.com/unity-tutorials" sl-processed="1"><i class="category-icon cat-6" aria-hidden="true"></i><span>Unity</span></a></li>
                        <li><a href="https://www.raywenderlich.com/articles" sl-processed="1"><i class="category-icon cat-7" aria-hidden="true"></i><span>Articles</span></a></li>
                        <li><a href="https://www.raywenderlich.com/tutorial-archive" class="active" sl-processed="1"><i class="category-icon cat-8" aria-hidden="true"></i><span>Archive</span></a></li>
                      </ul>
                    </li>

                    <li>
                      <a href="https://videos.raywenderlich.com/" class="top-level-link" sl-processed="1">Videos<svg version="1.1" class="svg-angle-down" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="9px" height="9px" viewBox="1.376 11.648 17.824 10.4" enable-background="new 1.376 11.648 17.824 10.4" xml:space="preserve" aria-hidden="true">
                        <path d="M19.2,13.152c0,0.149-0.063,0.288-0.192,0.416l-8.32,8.321c-0.106,0.105-0.245,0.159-0.416,0.159
                          c-0.17,0-0.299-0.054-0.384-0.159l-8.32-8.321c-0.128-0.128-0.192-0.267-0.192-0.416s0.064-0.288,0.192-0.416l0.864-0.896
                          c0.128-0.128,0.267-0.192,0.416-0.192s0.288,0.064,0.416,0.192l7.008,7.008l7.041-7.008c0.105-0.128,0.244-0.192,0.416-0.192
                          c0.17,0,0.299,0.064,0.383,0.192l0.896,0.896C19.137,12.843,19.2,12.981,19.2,13.152z"></path>
                        </svg></a>
                      <ul class="dropdown-menu video-dropdown slighter-fade-up">
                        <li><a href="https://videos.raywenderlich.com/" sl-processed="1"><i class="category-icon cat-1" aria-hidden="true"></i><span>Home</span></a></li>
                        <li><a href="https://videos.raywenderlich.com/courses" sl-processed="1"><i class="category-icon cat-2" aria-hidden="true"></i><span>Courses</span></a></li>
                        <li><a href="https://videos.raywenderlich.com/screencasts" sl-processed="1"><i class="category-icon cat-3" aria-hidden="true"></i><span>Screencasts</span></a></li>
                        <li><a href="https://videos.raywenderlich.com/schedule" sl-processed="1"><i class="category-icon cat-4" aria-hidden="true"></i><span>Upcoming</span></a></li>
                      </ul>
                    </li>

                    <li><a href="https://www.raywenderlich.com/rwpodcast" sl-processed="1">Podcast</a></li>
                    <li><a href="https://forums.raywenderlich.com/" sl-processed="1">Forums</a></li>
                    <li class="padding-right">
                      <a href="https://store.raywenderlich.com/" sl-processed="1">Store</a>
                    </li>
                  </ul>
                </li>

                <li class="search-button-holder-desktop">
                  <button id="search-submit-desktop" class="search-submit" aria-label="Show search field">
                    <svg version="1.1" id="svg-search-desktop" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="22px" height="22px" viewBox="0 0 34 32" enable-background="new 0 0 34 32" xml:space="preserve" aria-hidden="true">
                    <path d="M32.128,30.048l-5.312-5.312c-0.032-0.032-0.032-0.032-0.032-0.032l-1.728-1.728c1.983-2.4,3.168-5.504,3.168-8.865
                      C28.225,6.336,21.889,0,14.112,0C6.336,0,0,6.336,0,14.112c0,7.777,6.336,14.113,14.112,14.113c3.712,0,7.041-1.44,9.568-3.776
                      l5.088,5.088c0.032,0.032,0.032,0.032,0.032,0.032l1.921,1.92c0.479,0.447,1.184,0.544,1.567,0.128
                      C32.672,31.232,32.607,30.527,32.128,30.048L32.128,30.048z M14.112,26.24c-6.688,0-12.128-5.44-12.128-12.128
                      S7.424,1.984,14.112,1.984S26.24,7.424,26.24,14.112S20.8,26.24,14.112,26.24L14.112,26.24z"></path>
                    </svg>
                  </button>
                </li>                    
  
                <script>
                  jQuery.ajax({
                    type : "POST",
                    data : { "javascript" : "false", "url"  : window.location.href  },
                    url : "https://www.raywenderlich.com/wp-content/themes/raywenderlich/templates/login_area.php",
                    cache : false,
                  }).done(function(html) {
                    jQuery("ul#main-nav").append(html);
                  })
                </script>

              
				<li id="user-account-navigation" class="login-controls logged-out">
	          <div>
	              <a href="https://www.raywenderlich.com/session/new?mode=login&amp;redirect_uri=https%3A%2F%2Fwww.raywenderlich.com%2F60749%2Fgrand-central-dispatch-in-depth-part-1" class="login-link" sl-processed="1">Login / Sign Up</a>
	              <a href="https://store.raywenderlich.com/products/subscription" id="sub-banner-navigation" class="subscribe-link" sl-processed="1"><span class="full-text">Become a video</span><span class="full-text">subscriber</span><span class="mobile-text">Subscribe</span></a>
	          </div>
	      </li>

</ul>
            </nav>
          </div>
        </div>
        <div class="rw-green-border"></div>

        <div class="subnav-band"></div>
              <!-- .wrapper -->
      </header>
    </div>

    <div class="wrapper clearfix" id="print-header" style="display:none">
      <img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/header-graphic.svg" width="1200" height="78">
    </div>
    <div id="main" class="wrapper clearfix">
      <div id="container">
<div id="primary" class="no-margin-left">
  <div id="primary-container">
    <div class="banner-ad" syle="overflow:hidden">
      <!-- BuySellAds.com Ad Code -->
      <div id="bsap_1272017" class="bsap bsap_1272017" data-serve="CV7IEKT">
<style type="text/css">
div.bsap_1272017{width:100%;display:block;}div.bsap_1272017 a{width:728px;}div.bsap_1272017 a img{padding:0;}div.bsap_1272017 a em{font-style:normal;}div.bsap_1272017 a{display:block;font-size:11px;color:#888;font-family:verdana,sans-serif;margin:0;text-align:center;text-decoration:none;overflow:hidden;float:left;margin-bottom:10px;}
div.bsap_1272017 img{border:0;clear:right;}
div.bsap_1272017 a.adhere{color:#666;font-weight:bold;font-size:12px;border:1px solid #ccc;background:#e7e7e7;text-align:center;}
div.bsap_1272017 a.adhere:hover{border:1px solid #999;background:#ddd;color:#333;}div.bsap_1272017 a{line-height:100%;}div.bsap_1272017 a.adhere{width:728px;height:90px;line-height:720%;}html>body div.bsap_1272017 a.adhere{width:726px;height:88px;}div.bsap_1272017 img.s{height:0;width:0;}div.bsap_1272017{line-height:9px;}div.bsap_1272017 .bsap_adhere2,div.bsap_1272017 iframe{float:left;}div.bsap_1272017 .bsap_adhere2 a{height:90px;width:20px;background:url(http:\/\/s3.buysellads.com\/ac\/ah20x90_1.gif) no-repeat 0 0;text-indent:-9999px;}
</style>
<iframe width="728" height="90" id="ad_1272017_backfill2_frame" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/raw_2fd8e3019ee846ca965e3121208c9947.html" frameborder="0" class="bsap_adframe" scrolling="no"></iframe>

<script type="text/javascript" id="auto_1" class="ignoreme"> if (typeof(_bsap_serving_callback) !== 'undefined') _bsap_serving_callback(20054, 'CV7IEKT', ''); </script>
<script type="text/javascript" id="auto_2" class="ignoreme"> if (typeof(BSACallback) !== 'undefined') BSACallback(); </script></div>
      <!-- End BuySellAds.com Ad Code -->
    </div>
    <div id="content">
            <article id="post-60749" class="clearfix post-60749 post type-post status-publish format-standard has-post-thumbnail hentry category-archive tag-tutorial tag-gcd tag-grand-central-dispatch tag-concurrency tag-threading">
        <header class="entry-header">
          <h2 class="entry-title">
            <a href="https://www.raywenderlich.com/60749/grand-central-dispatch-in-depth-part-1" title="Grand Central Dispatch In-Depth: Part 1/2" sl-processed="1">Grand Central Dispatch In-Depth: Part 1/2</a>
          </h2>
          <div class="tutorial-meta" id="larger-screens">
            <div class="author-meta">
              <a href="https://www.raywenderlich.com/u/lolgrep" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/d16aac1d7ead64781644921a071b9e05" alt="" width="100" height="100" class="user-avatar"></a><a href="https://www.raywenderlich.com/u/lolgrep" class="author-name" sl-processed="1">Derek Selander</a>                    <span class="author-post-date">on April 9, 2014</span>
                              </div>
            <div class="social-links">
              <ul>
                <li class="twitter"><div id="tweetbutton60749m" class="tw_button" style="margin-bottom:10px;"><iframe id="twitter-widget-0" scrolling="no" frameborder="0" allowtransparency="true" class="twitter-share-button twitter-share-button-rendered twitter-tweet-button" title="Twitter Tweet Button" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/tweet_button.b3226572cee17eb8b0f0dfc053da78fc.en.html" style="position: static; visibility: visible; width: 61px; height: 20px;" data-url="https://www.raywenderlich.com/60749/grand-central-dispatch-in-depth-part-1"></iframe></div></li>                <li class="facebook iframe-link" style="position: relative;top: 0px;left: 11px; display: block;">
                  <iframe src="./Grand Central Dispatch In-Depth_ Part 1_2_files/like.html" allowtransparency="true" frameborder="0" scrolling="no" style="width: 74px; height: 20px;"></iframe>
                </li>
              </ul>
            </div>
          </div>
        </header>

        
        <div class="content-wrapper">
          <div id="attachment_70190" style="width: 260px" class="wp-caption alignright"><a href="./Grand Central Dispatch In-Depth_ Part 1_2_files/Concurrency_vs_Parallelism.png" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/Concurrency_vs_Parallelism.png" alt="Learn about concurrency in this Grand Central Dispatch in-depth tutorial series." title="Learn about concurrency in this Grand Central Dispatch in-depth tutorial series." width="250" height="240" class="size-full wp-image-70190"></a><p class="wp-caption-text">Learn about concurrency in this Grand Central Dispatch in-depth tutorial series.</p></div>
<p><em>Update note:</em> Check out our updated version of this <a href="http://www.raywenderlich.com/79149/grand-central-dispatch-tutorial-swift-part-1" title="Grand Central Dispatch Tutorial for Swift: Part 1/2" sl-processed="1">Grand Central Dispatch tutorial</a> in Swift and running on iOS 8!</p>
<p>Although <em>Grand Central Dispatch</em> (or GCD for short) has been around for a while, not everyone knows how to get the most out of it. This is understandable; concurrency is tricky, and GCD’s C-based API can seem like a set of pointy corners poking into the smooth world of Objective-C. Learn about Grand Central Dispatch in-depth in this two part tutorial series.</p>
<p>In this two-part series, the first tutorial explains what GCD does and showcases several of the more basic GCD functions. In the second part, you’ll learn several of the more advanced functions GCD has to offer.</p>
<h2>What is GCD?</h2>
<p>GCD is the marketing name for <em>libdispatch</em>, Apple’s library that provides support for concurrent code execution on multicore hardware on iOS and OS X. It offers the following benefits:</p>
<ul>
<li>GCD can improve your app’s responsiveness by helping you defer computationally expensive tasks and run them in the background.</li>
<li>GCD provides an easier concurrency model than locks and threads and helps to avoid concurrency bugs.</li>
<li>GCD can potentially optimize your code with higher performance primitives for common patterns such as singletons.</li>
</ul>
<p>This tutorial assumes that you have a basic understanding of working with blocks and GCD. If you’re brand-new to GCD, check out <a href="https://www.raywenderlich.com/?p=4295" sl-processed="1">Multithreading and Grand Central Dispatch on iOS for Beginners</a> to learn the essentials.  </p>
<h2 id="Terminology">GCD Terminology</h2>
<p>To understand GCD, you need to be comfortable with several concepts related to threading and concurrency. These can be both vague and subtle, so take a moment to review them briefly in the context of GCD.</p>
<p><em>Serial vs. Concurrent</em></p>
<p>These terms describe <i>when</i> tasks are executed with respect to each other. Tasks executed <i>serially</i> are always executed one at a time. Tasks executed <i>concurrently</i> might be executed at the same time.</p>
<p>Although these terms have wide application, for the purposes of this tutorial you can consider a task to be an Objective-C block. Don’t know what a block is? Check out the <a href="https://www.raywenderlich.com/?p=9328" sl-processed="1">How to Use Blocks in iOS 5 Tutorial</a>. In fact, you can also use GCD with function pointers, but in most cases this is substantially more tricky to use. Blocks are just easier!</p>
<p><em>Synchronous vs. Asynchronous</em></p>
<p>Within GCD, these terms describe when a function completes with respect to another task that the function asks GCD to perform. A <i>synchronous</i> function returns only after the completion of a task that it orders. </p>
<p>An <i>asynchronous</i> function, on the other hand, returns immediately, ordering the task to be done but does not wait for it. Thus, an asynchronous function does not block the current thread of execution from proceeding on to the next function.</p>
<p>Be careful  — when you read that a synchronous function “blocks” the current thread, or that the function  is a “blocking” function or blocking operation, don’t get confused! The verb <i>blocks</i> describes how a function affects its own thread and has no connection to the noun <i>block</i>, which describes an anonymous function literal in Objective-C and defines a task submitted to GCD.</p>
<p><em>Critical Section</em></p>
<p>This is a piece of code that must <i>not</i> be executed concurrently, that is, from two threads at once. This is usually because the code manipulates a shared resource such as a variable that can become corrupt if it’s accessed by concurrent processes.</p>
<p><em>Race Condition</em></p>
<p>This is a situation where the behavior of a software system depends on a specific sequence or timing of events that execute in an uncontrolled manner, such as the exact order of execution of the program’s concurrent tasks. Race conditions can produce unpredictable behavior that aren’t immediately evident through code inspection.</p>
<p><em>Deadlock</em><br>
Two (or sometimes more) items — in most cases, threads — are said to be deadlocked if they all get stuck waiting for each other to complete or perform another action. The first can’t finish because it’s waiting for the second to finish. But the second can’t finish because it’s waiting for the first to finish.
</p><p><em>Thread Safe</em></p>
<p>Thread safe code can be safely called from multiple threads or concurrent tasks without causing any problems (data corruption, crashing, etc). Code that is not thread safe must only be run in one context at a time. An example of thread safe code is <code>NSDictionary</code>. You can use it from multiple threads at the same time without issue. On the other hand, <code>NSMutableDictionary</code> is not thread safe and should only be accessed from one thread at a time.</p>
<p><em>Context Switch</em></p>
<p>A context switch is the process of storing and restoring execution state when you switch between executing different threads on a single process. This process is quite common when writing multitasking apps, but comes at a cost of some additional overhead.</p>
<h3>Concurrency vs Parallelism</h3>
<p>Concurrency and parallelism are often mentioned together, so it’s worth a short explanation to distinguish them from each other.</p>
<p>Separate parts of <em>concurrent</em> code can be executed “simultaneously”. However, it’s up to the system to decide how this happens — or if it happens at all. </p>
<p>Multi-core devices execute multiple threads at the same time via parallelism; however, in order for single-cored devices to achieve this, they must run a thread, perform a context switch, then run another thread or process. This usually happens quickly enough as to give the illusion of parallel execution as shown by the diagram below:</p>
<p><a href="./Grand Central Dispatch In-Depth_ Part 1_2_files/Concurrency_vs_Parallelism(1).png" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/Concurrency_vs_Parallelism(1).png" alt="Concurrency_vs_Parallelism" width="600" height="340" class="aligncenter size-full wp-image-63364" srcset="https://koenig-media.raywenderlich.com/uploads/2014/01/Concurrency_vs_Parallelism.png 600w, https://koenig-media.raywenderlich.com/uploads/2014/01/Concurrency_vs_Parallelism-480x272.png 480w, https://koenig-media.raywenderlich.com/uploads/2014/01/Concurrency_vs_Parallelism-266x151.png 266w" sizes="(max-width: 600px) 100vw, 600px"></a></p>
<p>Although you may write your code to use concurrent execution under GCD, it’s up to GCD to decide how much parallelism is required. Parallelism <i>requires</i> concurrency, but concurrency does not <i>guarantee</i> parallelism.</p>
<p>The deeper point here is that concurrency is actually about <i>structure</i>. When you code with GCD in mind, you structure your code to expose the pieces of work that can run simultaneously, as well as the ones that must not be run simulataneously. If you want to delve more deeply into this subject, check out <a href="http://vimeo.com/49718712" sl-processed="1">this excellent talk by Rob Pike</a>.</p>
<h3>Queues</h3>
<p>GCD provides <em>dispatch queues</em> to handle blocks of code; these queues manage the tasks you provide to GCD and execute those tasks in FIFO order. This guarantees that first task added to the queue is the first task started in the queue, the second task added will be the second to start, and so on down the line.</p>
<p>All dispatch queues are themselves <a href="https://www.raywenderlich.com/60749/grand-central-dispatch-in-depth-part-1#Terminology" sl-processed="1">thread-safe</a> in that you can access them from multiple threads simultaneously. The benefits of GCD are apparent when you understand how dispatch queues provide thread-safety to parts of your own code. The key to this is to choose the right <i>kind</i> of dispatch queue and the right <i>dispatching function</i> to submit your work to the queue.</p>
<p>In this section you’ll take a look at the two kinds of dispatch queues, the particular queues GCD offers, and then work through some examples that illustrate how to add work to the queues with the GCD dispatching functions.</p>
<p><em>Serial Queues</em></p>
<p>Tasks in <em>serial queues</em> execute one at a time, each task starting only after the preceding task has finished. As well, you won’t know the amount of time between one block ending and the next one beginning, as shown in the diagram below:</p>
<p><a href="https://koenig-media.raywenderlich.com/uploads/2014/01/Serial-Queue.png" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/Serial-Queue-480x272.png" alt="Serial-Queue" width="480" height="272" class="aligncenter size-medium wp-image-62298" srcset="https://koenig-media.raywenderlich.com/uploads/2014/01/Serial-Queue-480x272.png 480w, https://koenig-media.raywenderlich.com/uploads/2014/01/Serial-Queue-700x397.png 700w, https://koenig-media.raywenderlich.com/uploads/2014/01/Serial-Queue.png 1026w" sizes="(max-width: 480px) 100vw, 480px"></a></p>
<p>The execution timing of these tasks is under the control of GCD; the only thing you’re guaranteed to know is that GCD executes only one task at a time and that it executes the tasks in the order they were added to the queue.</p>
<p>Since no two tasks in a serial queue can ever run concurrently, there is no risk they might access the same critical section concurrently; that protects the critical section from race conditions <i>with respect to those tasks</i> only. So if the only way to access that critical section is via a task submitted to that dispatch queue, then you can be sure that the critical section is safe.</p>
<p><em>Concurrent Queues</em></p>
<p>Tasks in <em>concurrent queues</em> are guaranteed to start in the order they were added…and that’s about all you’re guaranteed! Items can finish in any order and you have no knowledge of the time it will take for the next block to start, nor the number of blocks that are running at any given time. Again, this is entirely up to GCD.</p>
<p>The diagram below shows a sample task execution plan of four concurrent tasks under GCD:</p>
<p><a href="https://koenig-media.raywenderlich.com/uploads/2014/01/Concurrent-Queue.png" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/Concurrent-Queue-480x272.png" alt="Concurrent-Queue" width="480" height="272" class="aligncenter size-medium wp-image-62299" srcset="https://koenig-media.raywenderlich.com/uploads/2014/01/Concurrent-Queue-480x272.png 480w, https://koenig-media.raywenderlich.com/uploads/2014/01/Concurrent-Queue.png 700w" sizes="(max-width: 480px) 100vw, 480px"></a></p>
<p>Notice how Block 1, 2, and 3 all ran quickly, one after another, while it took a while for Block 1 to start after Block 0 started. Also, Block 3 started after Block 2 but finished first. </p>
<p>The decision of when to start a block is entirely up to GCD. If the execution time of one block overlaps with another, it’s up to GCD to determine if it should run on a different core, if one is available, or instead to perform a context switch to a different block of code.</p>
<p>Just to make things interesting, GCD provides you with at least five particular queues to choose from within each queue type.</p>
<p><em>Queue Types</em></p>
<p>First, the system provides you with a special serial queue known as the <em>main queue</em>. Like any serial queue, tasks in this queue execute one at a time. However, it’s guaranteed that all tasks will execute on the main thread, which is the only thread allowed to update your UI. This queue is the one to use for sending messages to <code>UIViews</code> or posting notifications.</p>
<p>The system also provides you with several concurrent queues. These are known as the <em>Global Dispatch Queues</em>. There are currently four global queues of different priority: <em>background</em>, <em>low</em>, <em>default</em>, and <em>high</em>. Be aware that Apple’s APIs also uses these queues, so any tasks you add won’t be the only ones on these queues.</p>
<p>Finally, you can also create your own custom serial or concurrent queues. That means you have at least <i>five</i> queues at your disposal: the main queue, four global dispatch queues, plus any custom queues that you add to the mix!</p>
<p>And that’s the big picture of dispatch queues!</p>
<p>The “art” of GCD comes down to choosing the right queue dispatching function to submit your work to the queue. The best way to experience this is to work through the examples below, where we’ve provided some general recommendations along the way.</p>
<h2>Getting Started</h2>
<p>Since the goal of this tutorial is to optimize as well as safely call code from different threads using GCD, you’ll start with an almost-finished project named <em>GooglyPuff</em>. </p>
<p>GooglyPuff is a non-optimized, threading-unsafe app that overlays googly eyes on detected faces using Core Image’s face detection API. For the base image you can select any from the Photo Library or from a set of predefined URL images downloaded from the internet. </p>
<p><a href="https://koenig-media.raywenderlich.com/uploads/2014/01/GooglyPuff_Start_1.zip" sl-processed="1">Download the project here</a>. </p>
<p>Once you’ve downloaded the project, extract it to a convenient location, then open it up in Xcode and build and run. The app will look like the following:</p>
<p><a href="./Grand Central Dispatch In-Depth_ Part 1_2_files/Workflow1.png" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/Workflow1.png" alt="Workflow" width="689" height="291" class="aligncenter size-full wp-image-63653" srcset="https://koenig-media.raywenderlich.com/uploads/2014/01/Workflow1.png 689w, https://koenig-media.raywenderlich.com/uploads/2014/01/Workflow1-480x202.png 480w" sizes="(max-width: 689px) 100vw, 689px"></a></p>
<p>Notice when you choose the <em>Le Internet</em> option to download pictures, a <code>UIAlertView</code> pops up prematurely. You’ll fix this in the second part of this series.</p>
<p>There are four classes of interest in this project:</p>
<ul>
<li><em>PhotoCollectionViewController</em>: This is the first view controller that starts the app. It showcases all the selected photos through their thumbnails.</li>
<li><em>PhotoDetailViewController</em>: This performs the logic to add googly eyes to the image and to display the resulting image in a UIScrollView.</li>
<li><em>Photo</em>: This is a class cluster which instantiates photos from an instance of <code>NSURL</code> or from an instance of <code>ALAsset</code>. This class provides an image, thumbnail, and a status when downloading from a URL.</li>
<li><em>PhotoManager</em>: This manages all the instances of <code>Photo</code>.</li>
</ul>
<h2>Handling Background Tasks with dispatch_sync</h2>
<p>Head back to the app and add some photos from your Photo Library or use the <em>Le Internet</em> option to download a few. </p>
<p>Notice how long it takes for a new <code>PhotoDetailViewController</code> to instantiate after clicking on a <code>UICollectionViewCell</code> in the <code>PhotoCollectionViewController</code>; there’s a noticeable lag, especially when viewing large images on slower devices.</p>
<p>It’s often easy to overload <code>UIViewController’s</code> <code>viewDidLoad</code> with too much clutter; this often results in longer waits before the view controller appears. If possible, it’s best to offload some work to be done in the background if it’s not absolutely essential at load time. </p>
<p>This sounds like a job for <em>dispatch_async</em>!</p>
<p>Open <em>PhotoDetailViewController</em> and replace <em>viewDidLoad</em> with the following implementation:</p>
<pre lang="objc" class="hljs objectivec">- (<span class="hljs-keyword">void</span>)viewDidLoad
{   
    [<span class="hljs-keyword">super</span> viewDidLoad];
    <span class="hljs-built_in">NSAssert</span>(_image, <span class="hljs-string">@"Image not set; required to use view controller"</span>);
    <span class="hljs-keyword">self</span>.photoImageView.image = _image;
    
    <span class="hljs-comment">//Resize if neccessary to ensure it's not pixelated</span>
    <span class="hljs-keyword">if</span> (_image.size.height &lt;= <span class="hljs-keyword">self</span>.photoImageView.bounds.size.height &amp;&amp;
        _image.size.width &lt;= <span class="hljs-keyword">self</span>.photoImageView.bounds.size.width) {
        [<span class="hljs-keyword">self</span>.photoImageView setContentMode:<span class="hljs-built_in">UIViewContentModeCenter</span>];
    }
    
    <span class="hljs-built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="hljs-number">0</span>), ^{ <span class="hljs-comment">// 1</span>
        <span class="hljs-built_in">UIImage</span> *overlayImage = [<span class="hljs-keyword">self</span> faceOverlayImageFromImage:_image];
        <span class="hljs-built_in">dispatch_async</span>(dispatch_get_main_queue(), ^{ <span class="hljs-comment">// 2</span>
            [<span class="hljs-keyword">self</span> fadeInNewImage:overlayImage]; <span class="hljs-comment">// 3</span>
        });
    });
}
</pre>
<p>Here's what's going on in the modified code above:</p>
<ol>
<li>You first move the work off of the main thread and onto a global queue. Because this is a <code>dispatch_async()</code>, the block is submitted asynchronously meaning that execution of the calling thread continues. This lets <code>viewDidLoad</code> finish earlier on the main thread and makes the loading feel more snappy. Meanwhile, the face detection processing is started and will finish at some later time.</li>
<li>At this point, the face detection processing is complete and you've generated a new image. Since you want to use this new image to update your <code>UIImageView</code>, you add a new block of work to the main queue. Remember - you must always access UI Kit classes on the main thread!</li>
<li>Finally, you update the UI with <em>fadeInNewImage:</em> which performs a fade-in transition of the new googly eyes image.</li>
</ol>
<p>Build and run your app; select an image and you'll notice that the view controller loads up noticeably faster and adds the googly eyes after a short delay. This lends a nice effect to the app as you show the before and after photo for maximum impact. </p>
<p>As well, if you tried to load an insanely huge image, the app wouldn't hang in the process of loading the view controller, which allows the app to scale well.</p>
<p>As mentioned above, <code>dispatch_async</code> appends a block onto a queue and returns immediately. The task will then be executed at some later time as decided by GCD. Use <code>dispatch_async</code> when you need to perform a network-based or CPU intensive task in the background and not block the current thread.</p>
<p>Here's a quick guide of how and when to use the various queue types with <code>dispatch_async</code>:</p>
<ul>
<li><em>Custom Serial Queue</em>: A good choice when you want to perform background work serially and track it. This eliminates resource contention since you know only one task at a time is executing. Note that if you need the data from a method, you must inline another block to retrieve it or consider using <code>dispatch_sync</code>.</li>
<li><em>Main Queue (Serial)</em>: This is a common choice to update the UI after completing work in a task on a concurrent queue. To do this, you'll code one block inside another. As well, if you're in the main queue and call <code>dispatch_async</code> targeting the main queue, you can guarantee that this new task will execute sometime after the current method finishes.</li>
<li><em>Concurrent Queue</em>: This is a common choice to perform non-UI work in the background.</li>
</ul>
<h2>Delaying Work with dispatch_after</h2>
<p>Consider the UX of your app for a moment. It's possible that users might be confused about what to do when the open the app for the first time — were you? :] </p>
<p>It would be a good idea to display a prompt to the user if there aren't any photos in the <em>PhotoManager</em> class. However, you also need to think about how the user's eyes will navigate the home screen: if you display a prompt too quickly, they might miss it as their eyes lingered on other parts of the view. </p>
<p>A one-second delay before displaying the prompt should be enough to catch the user's attention as they get their first look at the app. </p>
<p>Add the following code to the stubbed-out implementation of <code>showOrHideNavPrompt</code> in <em>PhotoCollectionViewController.m</em>:</p>
<pre lang="objc" class="hljs objectivec">- (<span class="hljs-keyword">void</span>)showOrHideNavPrompt
{
    <span class="hljs-built_in">NSUInteger</span> count = [[PhotoManager sharedManager] photos].count;
    <span class="hljs-keyword">double</span> delayInSeconds = <span class="hljs-number">1.0</span>;
    dispatch_time_t popTime = dispatch_time(DISPATCH_TIME_NOW, (int64_t)(delayInSeconds * <span class="hljs-built_in">NSEC_PER_SEC</span>)); <span class="hljs-comment">// 1 </span>
    dispatch_after(popTime, dispatch_get_main_queue(), ^(<span class="hljs-keyword">void</span>){ <span class="hljs-comment">// 2 </span>
        <span class="hljs-keyword">if</span> (!count) {
            [<span class="hljs-keyword">self</span>.navigationItem setPrompt:<span class="hljs-string">@"Add photos with faces to Googlyify them!"</span>];
        } <span class="hljs-keyword">else</span> {
            [<span class="hljs-keyword">self</span>.navigationItem setPrompt:<span class="hljs-literal">nil</span>];
        }
    });
}
</pre>
<p><code>showOrHideNavPrompt</code> executes in <code>viewDidLoad</code> and anytime your <code>UICollectionView</code> is reloaded. Taking each numbered comment in turn:</p>
<ol>
<li>You declare the variable that specifies the amount of time to delay.</li>
<li>You then wait for the amount of time given in the <code>delayInSeconds</code> variable and then asynchronously add the block to the main queue.</li>
</ol>
<p>Build and run the app. There should be a slight delay, which will hopefully grab the user's attention and show them what to do.</p>
<p><code>dispatch_after</code> works just like a delayed <code>dispatch_async</code>. You still have no control over the actual time of execution nor can you cancel this once <code>dispatch_after</code> returns. </p>
<p>Wondering when it's appropriate to use <code>dispatch_after</code>?</p>
<ul>
<li><em>Custom Serial Queue</em>: Use caution when using <code>dispatch_after</code>  on a custom serial queue. You're better off sticking to the main queue. </li>
<li><em>Main Queue (Serial)</em>: This is a good choice for <code>dispatch_after</code>; Xcode has a nice autocomplete template for this.</li>
<li><em>Concurrent Queue</em>: Use caution when using <code>dispatch_after</code> on custom concurrent queues; it's rare that you'll do this. Stick to the main queue for these operations.</li>
</ul>
<h2>Making Your Singletons Thread-Safe</h2>
<p>Singletons. Love them or hate them, they're as popular in iOS as cats are on the web. :] </p>
<p>One frequent concern with singletons is that often they're not thread safe. This concern is well-justified given their use: singletons are often used from multiple controllers accessing the singleton instance at the same time.</p>
<p>Threading concerns for singletons range from initiation, to reads and writes of information.<br>
The <code>PhotoManager</code> class has been implemented as a singleton — and it suffers from these issues in its current state. To see how things can go wrong really quickly, you'll  create a controlled <a href="https://www.raywenderlich.com/60749/grand-central-dispatch-in-depth-part-1#Terminology" sl-processed="1">race condition</a> on the singleton instance. </p>
<p>Navigate to <em>PhotoManager.m</em> and find <code>sharedManager</code>; it will look like the code below:</p>
<pre lang="objc" class="hljs objectivec">+ (<span class="hljs-keyword">instancetype</span>)sharedManager    
{
    <span class="hljs-keyword">static</span> PhotoManager *sharedPhotoManager = <span class="hljs-literal">nil</span>;
    <span class="hljs-keyword">if</span> (!sharedPhotoManager) {
        sharedPhotoManager = [[PhotoManager alloc] init];
        sharedPhotoManager-&gt;_photosArray = [<span class="hljs-built_in">NSMutableArray</span> array];
    }
    <span class="hljs-keyword">return</span> sharedPhotoManager;
}
</pre>
<p>The code is rather simple in its current state; you create a singleton and instantiate a private <code>NSMutableArray</code> property named <code>photosArray</code>. </p>
<p>However, the <code>if</code> condition branch is not <a href="https://www.raywenderlich.com/60749/grand-central-dispatch-in-depth-part-1#Terminology" sl-processed="1">thread safe</a>; if you invoke this method multiple times, there's a possibility that one thread (call it Thread-A) could enter the <code>if</code> block and a context switch could occur before <code>sharedPhotoManager</code> is allocated. Then another thread (Thread-B) could enter the <code>if</code>, allocate an instance of the singleton, then exit. </p>
<p>When the system context switches back to Thread-A, you'll then allocate <i>another</i> instance of the singleton, then exit. At that point you have two instances of a singleton — which is not what you want!</p>
<p>To force this condition to happen, replace <code>sharedManager</code> in <em>PhotoManager.m</em> with the following implementation:</p>
<pre lang="objc" class="hljs objectivec">+ (<span class="hljs-keyword">instancetype</span>)sharedManager  
{
    <span class="hljs-keyword">static</span> PhotoManager *sharedPhotoManager = <span class="hljs-literal">nil</span>;
    <span class="hljs-keyword">if</span> (!sharedPhotoManager) {
        [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>];
        sharedPhotoManager = [[PhotoManager alloc] init];
        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"Singleton has memory address at: %@"</span>, sharedPhotoManager);
        [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>];
        sharedPhotoManager-&gt;_photosArray = [<span class="hljs-built_in">NSMutableArray</span> array];
    }
    <span class="hljs-keyword">return</span> sharedPhotoManager;
}
</pre>
<p>In the code above you're forcing a context switch to happen with <code>NSThread’s</code> <code>sleepForTimeInterval:</code> class method. </p>
<p>Open <em>AppDelegate.m</em> and add the following code to the very beginning of <code>application:didFinishLaunchingWithOptions:</code></p>
<pre lang="objc" class="hljs objectivec"><span class="hljs-built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="hljs-number">0</span>), ^{
    [PhotoManager sharedManager];
});

<span class="hljs-built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="hljs-number">0</span>), ^{
    [PhotoManager sharedManager];
});
</pre>
<p>This creates multiple asynchronous concurrent calls to instantiate the singleton and invoke the race condition as described above.</p>
<p>Build and run your project; check the console output and you'll see multiple singletons instantiated, as shown below:</p>
<p><a href="https://koenig-media.raywenderlich.com/uploads/2014/01/NSLog-Race-Condition.png" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/NSLog-Race-Condition-700x90.png" alt="NSLog-Race-Condition" width="700" height="90" class="aligncenter size-large wp-image-62319" srcset="https://koenig-media.raywenderlich.com/uploads/2014/01/NSLog-Race-Condition-700x90.png 700w, https://koenig-media.raywenderlich.com/uploads/2014/01/NSLog-Race-Condition-480x62.png 480w, https://koenig-media.raywenderlich.com/uploads/2014/01/NSLog-Race-Condition.png 778w" sizes="(max-width: 700px) 100vw, 700px"></a></p>
<p>Notice that there are several lines all showing different addresses of the singleton instance. That defeats the purpose of a singleton, doesn't it? :]</p>
<p>This output shows you that the critical section executed several times when it should have only have executed once. Now, admittedly, you forced this situation to happen, but you can imagine how this condition could occur unintentionally as well.</p>
<div class="note"><em>Note</em>: Based upon other system events beyond your control, a variable amount of <code>NSLog</code>s will show up on occasion. Threading issues can be extremely hard to debug since they tend to be hard to reproduce.</div>
<p>To correct this condition, the instantiation code should only execute once and block other instances from running while it is in the critical section of the <code>if</code> condition. This is exactly what <em>dispatch_once</em> does. </p>
<p>Replace the conditional <code>if</code> check with <code>dispatch_once</code> in the singleton initialization method as shown below:</p>
<pre lang="objc" class="hljs objectivec">+ (<span class="hljs-keyword">instancetype</span>)sharedManager
{
    <span class="hljs-keyword">static</span> PhotoManager *sharedPhotoManager = <span class="hljs-literal">nil</span>;
    <span class="hljs-keyword">static</span> <span class="hljs-built_in">dispatch_once_t</span> onceToken;
    <span class="hljs-built_in">dispatch_once</span>(&amp;onceToken, ^{
        [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>];
        sharedPhotoManager = [[PhotoManager alloc] init];
        <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"Singleton has memory address at: %@"</span>, sharedPhotoManager);
        [<span class="hljs-built_in">NSThread</span> sleepForTimeInterval:<span class="hljs-number">2</span>];
        sharedPhotoManager-&gt;_photosArray = [<span class="hljs-built_in">NSMutableArray</span> array];
    });
    <span class="hljs-keyword">return</span> sharedPhotoManager;
}
</pre>
<p>Build and run your app; check the console output and you'll now see one and only one instantiation of the singleton — which is what you'd expect for a singleton! :]</p>
<p>Now that you understand the importance of preventing race conditions, remove the <em>dispatch_async</em> statements from <em>AppDelegate.m</em> and replace <em>PhotoManager</em>'s singleton initialization with the following implementation:</p>
<pre lang="objc" class="hljs objectivec">+ (<span class="hljs-keyword">instancetype</span>)sharedManager
{
    <span class="hljs-keyword">static</span> PhotoManager *sharedPhotoManager = <span class="hljs-literal">nil</span>;
    <span class="hljs-keyword">static</span> <span class="hljs-built_in">dispatch_once_t</span> onceToken;
    <span class="hljs-built_in">dispatch_once</span>(&amp;onceToken, ^{
        sharedPhotoManager = [[PhotoManager alloc] init];
        sharedPhotoManager-&gt;_photosArray = [<span class="hljs-built_in">NSMutableArray</span> array];
    });
    <span class="hljs-keyword">return</span> sharedPhotoManager;
}
</pre>
<p><code>dispatch_once()</code> executes a block once and only once in a thread safe manner. Different threads that try to access the critical section — the code passed to <code>dispatch_once</code> — while a thread is already in this section are blocked until the critical section completes. </p>
<p><a href="https://koenig-media.raywenderlich.com/uploads/2014/01/Highlander_dispatch_once.png" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/Highlander_dispatch_once-480x274.png" alt="Highlander_dispatch_once" width="480" height="274" class="aligncenter size-medium wp-image-63388" srcset="https://koenig-media.raywenderlich.com/uploads/2014/01/Highlander_dispatch_once-480x274.png 480w, https://koenig-media.raywenderlich.com/uploads/2014/01/Highlander_dispatch_once-266x151.png 266w, https://koenig-media.raywenderlich.com/uploads/2014/01/Highlander_dispatch_once.png 700w" sizes="(max-width: 480px) 100vw, 480px"></a></p>
<p>It should be noted that this just makes access to the shared instance thread safe. It does <strong>not</strong> make the class thread safe, necessarily. You could still have other critical sections in the class, for instance anything that manipulates internal data. Those would need to be made thread safe in other ways, such as synchronising access to the data, as you'll see in the following sections.</p>
<h2>Handling the Readers and Writers Problem</h2>
<p>Thread-safe instantiation is not the only issue when dealing with singletons. If the singleton property represents a mutable object, then you need to consider whether that object is itself thread-safe. </p>
<p>If the object in question is a Foundation container class, then the answer is — "probably not"! Apple maintains a <a href="https://developer.apple.com/library/mac/documentation/cocoa/conceptual/multithreading/ThreadSafetySummary/ThreadSafetySummary.html" sl-processed="1">helpful and somewhat chilling list</a> of the numerous Foundation classes which are not thread-safe. <code>NSMutableArray</code>, used by your singleton, is right there among the rest. </p>
<p>Although many threads can read an instance of <code>NSMutableArray</code> simultaneously without issue, it's not safe to let one thread modify the array while another is reading it. Your singleton doesn't prevent this condition from happening in its current state.</p>
<p>To see the problem, have a look at <code>addPhoto:</code> in <code>PhotoManager.m</code>, which has been reproduced below:</p>
<pre lang="objc" class="hljs objectivec">- (<span class="hljs-keyword">void</span>)addPhoto:(Photo *)photo
{
    <span class="hljs-keyword">if</span> (photo) {
        [_photosArray addObject:photo];
        <span class="hljs-built_in">dispatch_async</span>(dispatch_get_main_queue(), ^{
            [<span class="hljs-keyword">self</span> postContentAddedNotification];
        });
    }
}
</pre>
<p>This is a <em>write</em> method as it modifies a private mutable array object. </p>
<p>Now take a look at <code>photos</code>, reproduced below:</p>
<pre lang="objc" class="hljs objectivec">- (<span class="hljs-built_in">NSArray</span> *)photos
{
  <span class="hljs-keyword">return</span> [<span class="hljs-built_in">NSArray</span> arrayWithArray:_photosArray];
}
</pre>
<p>This is termed a <em>read</em> method as it's reading the mutable array. It makes an immutable copy for the caller in order to defend against the caller mutating the array inappropriately, but none of this provides any protection against one thread calling the the write method <code>addPhoto:</code> while simultaneously another thread calls the read method <code>photos</code>. </p>
<p>This is the classic software development <a href="http://en.wikipedia.org/wiki/Readers%E2%80%93writers_problem" sl-processed="1">Readers-Writers Problem</a>. GCD provides an elegant solution of creating a <a href="http://en.wikipedia.org/wiki/Read/write_lock_pattern" sl-processed="1">Readers-writer lock</a> using <em>dispatch barriers</em>. </p>
<p>Dispatch barriers are a group of functions acting as a serial-style bottleneck when working with concurrent queues. Using GCD's barrier API ensures that the submitted block is the only item executed on the specified queue for that particular time. This means that all items submitted to the queue prior to the dispatch barrier must complete before the block will execute. </p>
<p>When the block's turn arrives, the barrier executes the block and ensures that the queue does not execute any other blocks during that time. Once finished, the queue returns to its default implementation. GCD provides both synchronous and asynchronous barrier functions.</p>
<p>The diagram below illustrates the effect of barrier functions on various asynchronous blocks:<br>
<a href="https://koenig-media.raywenderlich.com/uploads/2014/01/Dispatch-Barrier.png" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/Dispatch-Barrier-480x272.png" alt="Dispatch-Barrier" width="480" height="272" class="aligncenter size-medium wp-image-62356" srcset="https://koenig-media.raywenderlich.com/uploads/2014/01/Dispatch-Barrier-480x272.png 480w, https://koenig-media.raywenderlich.com/uploads/2014/01/Dispatch-Barrier.png 700w" sizes="(max-width: 480px) 100vw, 480px"></a></p>
<p>Notice how in normal operation the queue acts just like a normal concurrent queue. But when the barrier is executing, it essentially acts like a serial queue. That is, the barrier is the only thing executing. After the barrier finishes, the queue goes back to being a normal concurrent queue.</p>
<p>Here's when you would — and wouldn't — use barrier functions:</p>
<ul>
<li><em>Custom Serial Queue</em>: A bad choice here; barriers won't do anything helpful since a serial queue executes one operation at a time anyway.</li>
<li><em>Global Concurrent Queue:</em> Use caution here; this probably isn’t the best idea since other systems might be using the queues and you don’t want to monopolize them for your own purposes.
</li><li><em>Custom Concurrent Queue:</em> This is a great choice for atomic or critical areas of code. Anything you're setting or instantiating that needs to be thread safe is a great candidate for a barrier.</li>
</ul>
<p>Since the only decent choice above is the custom concurrent queue, you'll need to create one of your own to handle your barrier function and separate the read and write functions. The concurrent queue will allow multiple read operations simultaneously.</p>
<p>Open <em>PhotoManager.m</em>, and add the following private property to the class extension category:</p>
<pre lang="objc" class="hljs objectivec"><span class="hljs-class"><span class="hljs-keyword">@interface</span> <span class="hljs-title">PhotoManager</span> ()</span>
<span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>,<span class="hljs-keyword">strong</span>,<span class="hljs-keyword">readonly</span>) <span class="hljs-built_in">NSMutableArray</span> *photosArray;
<span class="hljs-keyword">@property</span> (<span class="hljs-keyword">nonatomic</span>, <span class="hljs-keyword">strong</span>) <span class="hljs-built_in">dispatch_queue_t</span> concurrentPhotoQueue; <span class="hljs-comment">///&lt; Add this</span>
<span class="hljs-keyword">@end</span>
</pre>
<p>Find <code>addPhoto:</code> and replace it with the following implementation:</p>
<pre lang="objc" class="hljs objectivec">- (<span class="hljs-keyword">void</span>)addPhoto:(Photo *)photo
{
    <span class="hljs-keyword">if</span> (photo) { <span class="hljs-comment">// 1</span>
        dispatch_barrier_async(<span class="hljs-keyword">self</span>.concurrentPhotoQueue, ^{ <span class="hljs-comment">// 2 </span>
            [_photosArray addObject:photo]; <span class="hljs-comment">// 3</span>
            <span class="hljs-built_in">dispatch_async</span>(dispatch_get_main_queue(), ^{ <span class="hljs-comment">// 4</span>
                [<span class="hljs-keyword">self</span> postContentAddedNotification]; 
            });
        });
    }
}
</pre>
<p>Here's how your new write function works:</p>
<ol>
<li>Check that there's a valid photo before performing all the following work.</li>
<li>Add the write operation using your custom queue. When the critical section executes at a later time this will be the only item in your queue to execute.</li>
<li>This is the actual code which adds the object to the array. Since it's a barrier block, this block will never run simultaneously with any other block in <code>concurrentPhotoQueue</code>.</li>
<li>Finally you post a notification that you've added the image. This notification should be posted from the main thread because it will do UI work, so here you dispatch another task asynchronously to the main queue for the notification.</li>
</ol>
<p>This takes care of the write, but you also need to implement the <em>photos</em> read method and instantiate <code>concurrentPhotoQueue</code>. </p>
<p>To ensure thread safety with the writer side of matters, you need to perform the read on the <code>concurrentPhotoQueue</code> queue. You need to return from the function though, so you can't dispatch asynchronously to the queue because that wouldn't necessarily run before the reader function returns.</p>
<p>In this case, <code>dispatch_sync</code> would be an excellent candidate.</p>
<p><code>dispatch_sync()</code> synchronously submits work and waits for it to be completed before returning. Use <code>dispatch_sync</code> to track of your work with dispatch barriers, or when you need to wait for the operation to finish before you can use the data processed by the block. If you're working with the second case, you'll sometimes see a <code>__block</code> variable written outside of the <code>dispatch_sync</code> scope in order to use the processed object returned outside the <code>dispatch_sync</code> function.</p>
<p>You need to be careful though. Imagine if you call <code>dispatch_sync</code> and target the current queue you're already running on. This will result in a deadlock because the call will wait to until the block finishes, but the block can't finish (it can't even start!) until the currently executing task is finished, which can't! This should force you to be conscious of which queue you're calling from —  as well as which queue you're passing in.</p>
<p>Here's a quick overview of when and where to use <code>dispatch_sync</code>:</p>
<ul>
<li><em>Custom Serial Queue:</em> Be VERY careful in this situation; if you're running in a queue and call <code>dispatch_sync</code> targeting the same queue, you will definitely create a deadlock.</li>
<li><em>Main Queue (Serial):</em> Be VERY careful for the same reasons as above; this situation also has potential for a deadlock condition.</li>
<li><em>Concurrent Queue:</em> This is a good candidate to sync work through dispatch barriers or when waiting for a task to complete so you can perform further processing.</li>
</ul>
<p>Still working in <em>PhotoManager.m</em>, replace <code>photos</code> with the following implementation:</p>
<pre lang="objc" class="hljs objectivec">- (<span class="hljs-built_in">NSArray</span> *)photos
{
    __block <span class="hljs-built_in">NSArray</span> *array; <span class="hljs-comment">// 1</span>
    <span class="hljs-built_in">dispatch_sync</span>(<span class="hljs-keyword">self</span>.concurrentPhotoQueue, ^{ <span class="hljs-comment">// 2</span>
        array = [<span class="hljs-built_in">NSArray</span> arrayWithArray:_photosArray]; <span class="hljs-comment">// 3</span>
    });
    <span class="hljs-keyword">return</span> array;
}
</pre>
<p>Here's your read function. Taking each numbered comment in turn, you'll find the following:</p>
<ol>
<li>The <code>__block</code> keyword allows objects to be mutable inside a block. Without this, <code>array</code> would be read-only inside the block and your code wouldn't even compile.</li>
<li>Dispatch synchronously onto the <code>concurrentPhotoQueue</code> to perform the read.</li>
<li>Store the photo array in <code>array</code> and return it.</li>
</ol>
<p>Finally, you need to instantiate your <code>concurrentPhotoQueue</code> property. Change <code>sharedManager</code> to instantiate the queue like so:</p>
<pre lang="objc" class="hljs objectivec">+ (<span class="hljs-keyword">instancetype</span>)sharedManager
{
    <span class="hljs-keyword">static</span> PhotoManager *sharedPhotoManager = <span class="hljs-literal">nil</span>;
    <span class="hljs-keyword">static</span> <span class="hljs-built_in">dispatch_once_t</span> onceToken;
    <span class="hljs-built_in">dispatch_once</span>(&amp;onceToken, ^{
        sharedPhotoManager = [[PhotoManager alloc] init];
        sharedPhotoManager-&gt;_photosArray = [<span class="hljs-built_in">NSMutableArray</span> array];

        <span class="hljs-comment">// ADD THIS:</span>
        sharedPhotoManager-&gt;_concurrentPhotoQueue = dispatch_queue_create(<span class="hljs-string">"com.selander.GooglyPuff.photoQueue"</span>,
                                                    DISPATCH_QUEUE_CONCURRENT); 
    });
    
    <span class="hljs-keyword">return</span> sharedPhotoManager;
}
</pre>
<p>This initializes <code>concurrentPhotoQueue</code> as a concurrent queue using <code>dispatch_queue_create</code>. The first parameter is a reversed DNS style naming convention; make sure it's descriptive since this can be helpful when debugging. The second parameter specifies whether you want your queue to be serial or concurrent. </p>
<div class="note"><em>Note</em>: When searching for examples on the web, you'll often see people pass <code>0</code> or <code>NULL</code> as the second parameter of <code>dispatch_queue_create</code>. This is a dated way of creating a serial dispatch queue; it's always better to be specific with your parameters.</div>
<p>Congratulations — your <code>PhotoManager</code> singleton is now thread safe. No matter where or how you read or write photos, you can be confident that it will be done in a safe manner with no amusing surprises.</p>
<h2>A Visual Review of Queueing</h2>
<p>Still not 100% sure on the essentials of GCD? Make sure you're comfortable with the basics by creating simple examples yourself using GCD functions using breakpoints and <code>NSLog</code> statements to make sure you understand what is happening. </p>
<p>I've provided two animated GIFs below to help cement your understanding of <code>dispatch_async</code> and <code>dispatch_sync</code>. The code is included above each GIF as a visual aid; pay attention to each step of the GIF showing the breakpoint in the code on the left and the related queue state on the right.</p>
<h3>dispatch_sync Revisited</h3>
<pre lang="objc" class="hljs objectivec">- (<span class="hljs-keyword">void</span>)viewDidLoad
{
  [<span class="hljs-keyword">super</span> viewDidLoad];

  <span class="hljs-built_in">dispatch_sync</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="hljs-number">0</span>), ^{

      <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"First Log"</span>);

  });
  
  <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"Second Log"</span>);
}
</pre>
<p><a href="./Grand Central Dispatch In-Depth_ Part 1_2_files/dispatch_sync_in_action.gif" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/dispatch_sync_in_action.gif" alt="dispatch_sync_in_action" width="700" height="280" class="aligncenter size-full wp-image-65482"></a></p>
<p>Here's your guide to the various states of the diagram:</p>
<ol>
<li>The main queue chugs along executing tasks in order — up next is a task to instantiate <code>UIViewController</code> which includes <code>viewDidLoad</code>.</li>
<li><code>viewDidLoad</code> executes on the main thread.</li>
<li>The main thread is currently inside <code>viewDidLoad</code> and is just about to reach <code>dispatch_sync</code>.</li>
<li>The <code>dispatch_sync</code> block is added to a global queue and will execute at a later time.  Processes are halted on the main thread until the block completes. Meanwhile, the global queue is concurrently processing tasks; recall that blocks will be dequeued in FIFO order on a global queue but can be executed concurrently.</li>
<li>The global queue processes the tasks that were already present on the queue before the <code>dispatch_sync</code> block was added.</li>
<li>Finally, the <code>dispatch_sync</code> block has its turn.</li>
<li>The block is done so the tasks on the main thread can resume.</li>
<li><code>viewDidLoad</code> method is done, and the main queue carries on processing other tasks.</li>
</ol>
<p><code>dispatch_sync</code> adds a task to a queue and waits until that task completes. <code>dispatch_async</code> does the exact same thing, but the only exception is that it doesn't wait for the task to complete before proceeding onwards from the calling thread.</p>
<h3>dispatch_async Revisited</h3>
<pre lang="objc" class="hljs objectivec">- (<span class="hljs-keyword">void</span>)viewDidLoad
{
  [<span class="hljs-keyword">super</span> viewDidLoad];

  <span class="hljs-built_in">dispatch_async</span>(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, <span class="hljs-number">0</span>), ^{

      <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"First Log"</span>);

  });
  
  <span class="hljs-built_in">NSLog</span>(<span class="hljs-string">@"Second Log"</span>);
}
</pre>
<p><a href="./Grand Central Dispatch In-Depth_ Part 1_2_files/dispatch_async_in_action.gif" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/dispatch_async_in_action.gif" alt="dispatch_async_in_action" width="700" height="280" class="aligncenter size-full wp-image-65477"></a></p>
<ol>
<li>The main queue chugs along executing tasks in order — up next is a task to instantiate <code>UIViewController</code> which includes <code>viewDidLoad</code>.</li>
<li><code>viewDidLoad</code> executes on the main thread.</li>
<li>The main thread is currently inside <code>viewDidLoad</code> and is just about to reach <code>dispatch_async</code>.</li>
<li>The <code>dispatch_async</code> block is added to a global queue and will execute at a later time.</li>
<li><code>viewDidLoad</code> continues to move on after adding <code>dispatch_async</code> to the global queue and the main thread turns its attention to the remaining tasks. Meanwhile, the global queue is concurrently processing its outstanding tasks. Remember that blocks will be dequeued in a FIFO order on a global queue but can be executed concurrently.</li>
<li>The block of code added by <code>dispatch_async</code> is now executing.</li>
<li>The <code>dispatch_async</code> block is done and both <code>NSLog</code> statements have placed their output on the console.</li>
</ol>
<p>In this particular instance, the second <code>NSLog</code> statement executes, followed by the first <code>NSLog</code> statement. This isn't always the case — it's dependent on what the hardware is doing at that given time, and you have no control nor knowledge as to which statement will execute first. The "first" <code>NSLog</code> could be the first log to execute in some invocations.</p>
<h2>Where to Go From Here?</h2><div class="inline-video-ad" id="sub-banner-inline">
              <div class="inline-video-ad-wrapper">
                <a href="https://videos.raywenderlich.com/courses" sl-processed="1">
                  <div class="col-wrapper">
                    <div class="col">
                      <img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/video-yeti@2x.png" alt="yeti holding videos">
                    </div>
                    <div class="col large-col">
                      <span>Want to learn even faster? Save time with our <span>video courses</span></span>
                    </div>
                  </div>
                </a>

              </div>
            </div>
<p>In this tutorial, you learned how to make your code thread safe and how to maintain the responsiveness of the main thread while performing CPU intensive tasks. </p>
<p>You can download the <a href="https://koenig-media.raywenderlich.com/uploads/2014/01/GooglyPuff_End_1.zip" sl-processed="1">GooglyPuff Project</a> which contains all the improvements made in this tutorial so far. In the second part of this tutorial you'll continue to improve upon this project.</p>
<p>If you plan on optimizing your own apps, you really should be profiling your work with the <em>Time Profile</em> template in <em>Instruments</em>. Using this utility is outside the scope of this tutorial, so check out <a href="https://www.raywenderlich.com/?p=23037" target="_blank" sl-processed="1">How to Use Instruments</a> for a excellent overview. </p>
<p>Also make sure that you profile with an actual device, since testing on the Simulator can give a very inaccurate picture of the program's speed.</p>
<p>In the <a href="https://www.raywenderlich.com/?p=63338" sl-processed="1">next part</a> of this tutorial you'll dive even deeper into GCD's API to do even more cool stuff.</p>
<p>If you have any questions or comments, feel free to join the discussion below!</p>
	
        </div>

                    
            <script>
              jQuery.expr[":"].icontains = jQuery.expr.createPseudo(function (arg) {
                return function (elem) {
                  return jQuery(elem).text().toUpperCase().indexOf(arg.toUpperCase()) >= 0;        
                };
              });
              jQuery(document).ready(function() {
                var finalHeader = jQuery(".content-wrapper h2:icontains('where to go from here')");
                if (finalHeader.length === 0) {
                  finalHeader = jQuery(".content-wrapper h2:last");
                }
                if (finalHeader.length === 0) {
                  return;
                }
                var inlineAd = jQuery('#sub-banner-inline');
                finalHeader.after(inlineAd);
              });
            </script>
                <footer>
          <div class="social-links" style="border-bottom: none;">
            <ul>
              <li class="twitter" style="float: left;"><div id="tweetbutton60749m" class="tw_button" style="margin-bottom:10px;"><iframe id="twitter-widget-1" scrolling="no" frameborder="0" allowtransparency="true" class="twitter-share-button twitter-share-button-rendered twitter-tweet-button" title="Twitter Tweet Button" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/tweet_button.b3226572cee17eb8b0f0dfc053da78fc.en(1).html" style="position: static; visibility: visible; width: 61px; height: 20px;" data-url="https://www.raywenderlich.com/60749/grand-central-dispatch-in-depth-part-1"></iframe></div></li>              <li class="facebook iframe-link" style="position: relative;top: 0px;left: 11px;display: block; float: left;">
                <iframe src="./Grand Central Dispatch In-Depth_ Part 1_2_files/like(1).html" allowtransparency="true" frameborder="0" scrolling="no" style="width: 74px; height: 20px;"></iframe>
              </li>
            </ul>
          </div>
        </footer>
      </article>
      <div id="author-information" class="clearfix">
        <img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/arrow@2x.png" width="40" height="21" id="arrow">
        			
          <div class="author-photo">
            <img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/d16aac1d7ead64781644921a071b9e05" alt="" width="100" height="100" class="user-avatar">          </div>
          <div class="author-meta">
            <a href="https://www.raywenderlich.com/u/lolgrep" sl-processed="1">Derek Selander</a>            <p class="bio">Derek is an iOS developer who enjoys talking about LLDB and other debugging tools. All of his tutorials involve debugging in one way or another.</p>	
          </div>
                      <ul class="follow-links">
              <li class="twitter"><a href="http://www.twitter.com/LOLgrep" target="_block" sl-processed="1">Follow Derek Selander on Twitter</a></li>
            </ul>
                </div>
              <section id="comments">
                  <div class="excerpt" style="display:none">Concurrency is a tough topic. Learn about Grand Central Dispatch in-depth in this two part tutorial series.</div>
        <div id="discourse-comments" style="padding:10px 30px 30px 30px"><iframe src="./Grand Central Dispatch In-Depth_ Part 1_2_files/comments.html" id="discourse-embed-frame" width="100%" frameborder="0" scrolling="no" height="721px"></iframe></div>
        ​        <script type="text/javascript">
            DiscourseEmbed = { discourseUrl: "https://forums.raywenderlich.com/",
                               discourseEmbedUrl: "https://www.raywenderlich.com/60749/grand-central-dispatch-in-depth-part-1",
                               discourseUserName: "Lolgrep"};
            (function() {
              var d = document.createElement('script'); d.type = 'text/javascript'; d.async = true;
              d.src = DiscourseEmbed.discourseUrl + 'javascripts/embed.js';
              (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(d);
            })();
        </script>
      

        </section>                            
          </div>
  </div>
</div>
<section id="secondary">
	<h1 id="other-items-of-interest">Other Items of Interest</h1>
	<section id="video-subscription-ad" class="rw-module">
		<a href="https://videos.raywenderlich.com/courses" id="sub-banner-sidebar" sl-processed="1">
			<div class="coin-holder">
				<img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/subscription-coin-bg-3@2x.png" class="background-coin" alt="">
				<img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/subscription-coin-bg-2@2x.png" class="background-coin" alt="">
				<img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/subscription-coin-bg-1@2x.png" class="background-coin" alt="">
				<img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/subscription-coin-base@2x.png" alt="">
			</div>
			<h2><span>Save time.</span><br>Learn more with our video courses.</h2>
			<button>Get Started!</button>
		</a>
	</section>
	<section id="newsletter-signup" class="rw-module">
		<header>
			<h1>raywenderlich.com Weekly</h1>
		</header>
		<div>
			<img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/ia_tilted@2x.png" width="109" height="139">
			<p>Sign up to receive the latest tutorials from raywenderlich.com each week, and receive a <em>free epic-length tutorial</em> as a bonus!</p>
			<img src="https://www.raywenderlich.com/60749/grand-central-dispatch-in-depth-part-1">
			<form novalidate="" target="_blank" class="validate" name="mc-embedded-subscribe-form" id="mc-embedded-subscribe-form" method="post" action="https://raywenderlich.us1.list-manage.com/subscribe/post?u=1bc8e630b1599df629818e59b&amp;id=83b6edc87f">
				<input type="text" id="mce-NAME" class="required" name="NAME" value="" placeholder="Your full name">
				<input type="email" id="mce-EMAIL" class="required email" name="EMAIL" value="" placeholder="Your best email">
				<input type="submit" class="button" id="mc-embedded-subscribe" name="subscribe" value="Sign Up!">
			</form>
		</div>
	</section>
	<section id="site-ads">
		<h1>Advertise with Us!</h1>
      <div id="bsap_1274837" class="bsap bsap_1274837" data-serve="CV7IEKV">
<style type="text/css">
div.bsap_1274837{width:100%;display:block;}div.bsap_1274837 a{width:300px;}div.bsap_1274837 a img{padding:0;}div.bsap_1274837 a em{font-style:normal;}div.bsap_1274837 a{display:block;font-size:11px;color:#888;font-family:verdana,sans-serif;margin:0;text-align:center;text-decoration:none;overflow:hidden;float:left;margin-bottom:10px;}
div.bsap_1274837 img{border:0;clear:right;}
div.bsap_1274837 a.adhere{color:#666;font-weight:bold;font-size:12px;border:1px solid #ccc;background:#e7e7e7;text-align:center;}
div.bsap_1274837 a.adhere:hover{border:1px solid #999;background:#ddd;color:#333;}div.bsap_1274837 a{line-height:100%;}div.bsap_1274837 a.adhere{width:300px;height:250px;line-height:2000%;}html>body div.bsap_1274837 a.adhere{width:298px;height:248px;}div.bsap_1274837 img.s{height:0;width:0;}div.bsap_1274837{line-height:9px;}div.bsap_1274837 .bsap_adhere a{height:19px !important;width:298px !important;font-size:10px;background:#f1f1f1;border:1px solid #e1e1e1;border-top:none;border-radius: 0 0 2px 2px;line-height:16px;}.bsap_backfillframe{border:0;}
</style>
<iframe width="300" height="250" id="ad_1274837_backfill2_frame" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/raw_dbe6967a82d17dc36ab454e930924774.html" frameborder="0" class="bsap_adframe" scrolling="no"></iframe>

<script type="text/javascript" id="auto_3" class="ignoreme"> if (typeof(_bsap_serving_callback) !== 'undefined') _bsap_serving_callback(20055, 'CV7IEKV', ''); </script>
<script type="text/javascript" id="auto_4" class="ignoreme"> if (typeof(BSACallback) !== 'undefined') BSACallback(); </script></div>
      <!-- End BuySellAds Zone Code -->

      <!-- BuySellAds.com Zone Code -->
      <div id="smallads">
      	<div id="bsap_1260352" class="bsap bsap_1260352" data-serve="CV7I55V">
<style type="text/css">
div.bsap_1260352{width:100%;display:block;}div.bsap_1260352 a{width:125px;}div.bsap_1260352 a img{padding:0;}div.bsap_1260352 a em{font-style:normal;}div.bsap_1260352 a{display:block;font-size:11px;color:#888;font-family:verdana,sans-serif;margin:0;text-align:center;text-decoration:none;overflow:hidden;float:left;}
div.bsap_1260352 img{border:0;clear:right; }
div.bsap_1260352 a.adhere{color:#666;font-weight:bold;font-size:12px;border:1px solid #ccc;background:#e7e7e7;text-align:center;}
div.bsap_1260352 a.adhere:hover{border:1px solid #999;background:#ddd;color:#333;}div.bsap_1260352 a{line-height:100%;}div.bsap_1260352 a.adhere{width:125px;height:125px;line-height:1000%;}html>body div.bsap_1260352 a.adhere{width:123px;height:123px;}div.bsap_1260352 img.s{height:0;width:0;}
</style>
<!-- no ad --><a href="https://srv.buysellads.com/ads/click/x/GTND4237CWADC27UCKALYKQWF6BILK3JCTBD6Z3JCEAIP5QNC6YIV2JKC6BDL2QYCKSDTK3EHJNCLSIZ" class="ad1 odd " title="appgarten.io" id="bsa_7382130" target="_blank" rel="nofollow" sl-processed="1">
<img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/7382130-1491226066.gif" width="125" height="125" alt=""></a><!-- no ad --><a href="https://srv.buysellads.com/ads/click/x/GTND4237CWADC27UCKALYKQWF6BILK3LCWSILZ3JCEAIP5QNCVSD427KC6BDL2QYCKSDTK3EHJNCLSIZ" class="ad3  even" title="Pre-register, $50+ of in-game rewards!" id="bsa_7414390" target="_blank" rel="nofollow" sl-processed="1">
<img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/a63e77e24bdc6587143b88709f1a0a98-1494014893.jpeg" width="125" height="125" alt=""></a><iframe width="125" height="125" id="ad_6568900_frame" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/raw_c9fc6716b320033f391691b25a15327e.html" frameborder="0" class="bsap_adframe" scrolling="no"></iframe>

<script type="text/javascript" id="auto_5" class="ignoreme"> if (typeof(_bsap_serving_callback) !== 'undefined') _bsap_serving_callback(49937, 'CV7I55V', ''); </script><a href="https://srv.buysellads.com/ads/click/x/GTND4237CWADC27UCKALYKQWF6BIEKJUCVYICZ3JCEAIP53ICTBIV2JKC6BDL2QYCKSDTK3EHJNCLSIZ" class="ad5  even" title="iOS and tvOS Video Tutorials from CartoonSmart" id="bsa_2489343" target="_blank" rel="nofollow" sl-processed="1">
<img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/2489343-1489640396.gif" width="125" height="125" alt=""></a>
<script type="text/javascript" id="auto_6" class="ignoreme"> if (typeof(BSACallback) !== 'undefined') BSACallback(); </script></div>
      	<div style="clear:both"></div>
      </div>
      <div id="razeware_ads">
      	<a href="http://pragmaconference.com/" target="_blank" class="razewareads" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/PragmaConf16_banner_125x125.png" alt="PragmaConf 2016" width="125" height="125" style="margin-left:15px;"></a>
        <a href="http://www.fivepackcreative.com/alt-u/" target="_blank" class="razewareads" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/altu.png" alt="Come check out Alt U" width="125" height="125" style="margin-left:15px"></a>
      </div>

      <!-- End BuySellAds.com Zone Code -->
      <a href="http://www.raywenderlich.com/advertise" class="rw-button2" id="advertise-with-us" sl-processed="1">Advertise Here!</a>
	</section>

	<section id="our-books" class="rw-module">
		<header>
			<h1>Our Books</h1>
		</header>
		<div>
			<ul class="books">
				<li>
					<a href="https://store.raywenderlich.com/products/ios-apprentice" sl-processed="1">
						<img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/ia1234@2x.png" width="110" height="142">
					</a>
				</li>
				<li>
					<a href="https://store.raywenderlich.com/products/rxswift" sl-processed="1">
						<img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/rxs@2x.png" width="110" height="142">
					</a>
				</li>
				<li>
					<a href="https://store.raywenderlich.com/products/unity-games-by-tutorials" sl-processed="1">
						<img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/ua@2x.png" width="110" height="142">
					</a>
				</li>
				<li>
					<a href="https://store.raywenderlich.com/products/swift-apprentice" sl-processed="1">
						<img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/sa@2x.png" width="110" height="142">
					</a>
				</li>
				<li>
					<a href="https://store.raywenderlich.com/products/core-data-by-tutorials" sl-processed="1">
						<img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/cdt@2x.png" width="110" height="142">
					</a>
				</li>
				<li>
					<a href="https://store.raywenderlich.com/products/tvos-apprentice" sl-processed="1">
						<img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/tvt@2x.png" width="110" height="142">
					</a>
				</li>
				<li>
					<a href="https://store.raywenderlich.com/products/watchos-by-tutorials" sl-processed="1">
						<img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/w2t@2x.png" width="110" height="142">
					</a>
				</li>
				<li>
					<a href="https://store.raywenderlich.com/products/ios-10-by-tutorials" sl-processed="1">
						<img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/i10t@2x.png" width="110" height="142">
					</a>
				</li>
				<li>
					<a href="https://store.raywenderlich.com/products/3d-apple-games-by-tutorials" sl-processed="1">
						<img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/igt2@2x.png" width="110" height="142">
					</a>
				</li>
				<li>
					<a href="https://store.raywenderlich.com/products/ios-animations-by-tutorials" sl-processed="1">
						<img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/iat@2x.png" width="110" height="142">
					</a>
				</li>
				<li>
					<a href="https://store.raywenderlich.com/products/2d-apple-games-by-tutorials" sl-processed="1">
						<img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/igt1@2x.png" width="110" height="142">
					</a>
				</li>
			</ul>
		</div>
	</section>
	<section id="tutorial-team" class="rw-module">
		<header>
			<h1>Our Team</h1>
		</header>
		<div>
			<h2>Video Team</h2><ul><li><a href="https://www.raywenderlich.com/about#lparham" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/7f78a804fa41e717c49d37b9be520451" alt="" width="100" height="100" class="user-avatar"></a></li><li><a href="https://www.raywenderlich.com/about#bmoakley" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/184e7fed489d4a5552e1d34df58fc65f" alt="" width="100" height="100" class="user-avatar"></a></li><li><a href="https://www.raywenderlich.com/about#mpringle" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/4172b0c9cc00ea2075256f8e2540576f" alt="" width="100" height="100" class="user-avatar"></a></li></ul><p>... <a href="https://www.raywenderlich.com/about#abt_video-team" sl-processed="1">20 total!</a></p><h2>Swift Team</h2><ul><li><a href="https://www.raywenderlich.com/about#ro\" brien'="" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/41a7b3356422420854cc994850673027" alt="" width="100" height="100" class="user-avatar"></a></li><li><a href="https://www.raywenderlich.com/about#vngo" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/86526f60506a47c47f55b75186cc9e4c" alt="" width="100" height="100" class="user-avatar"></a></li><li><a href="https://www.raywenderlich.com/about#simpe" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/1d1aca7a6cde36af51a4628b3776fb0b" alt="" width="100" height="100" class="user-avatar"></a></li></ul><p>... <a href="https://www.raywenderlich.com/about#abt_tut-swift" sl-processed="1">15 total!</a></p><h2>iOS Team</h2><ul><li><a href="https://www.raywenderlich.com/about#mciurus" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/f8e16510d19bd76d13578ebbf6dc4d12" alt="" width="100" height="100" class="user-avatar"></a></li><li><a href="https://www.raywenderlich.com/about#" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/rw-logo_250.png" width="100" height="100"></a></li><li><a href="https://www.raywenderlich.com/about#cwagner" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/6dee842b5eb2fd94ffa79edac00b440e" alt="" width="100" height="100" class="user-avatar"></a></li></ul><p>... <a href="https://www.raywenderlich.com/about#abt_tut-ios" sl-processed="1">42 total!</a></p><h2>Android Team</h2><ul><li><a href="https://www.raywenderlich.com/about#jnocentini" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/173c031b8555fe85f2e967059d888caa" alt="" width="100" height="100" class="user-avatar"></a></li><li><a href="https://www.raywenderlich.com/about#asreekumar" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/832a260528bc5594e0b3d00154bfea32" alt="" width="100" height="100" class="user-avatar"></a></li><li><a href="https://www.raywenderlich.com/about#e" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/8ed7a4442b5a9f059dcf6016ae2b79e4" alt="" width="100" height="100" class="user-avatar"></a></li></ul><p>... <a href="https://www.raywenderlich.com/about#abt_tut-android" sl-processed="1">16 total!</a></p><h2>macOS Team</h2><ul><li><a href="https://www.raywenderlich.com/about#zmatok" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/7100c598a271c1047cb08d9c29fdfb9e" alt="" width="100" height="100" class="user-avatar"></a></li><li><a href="https://www.raywenderlich.com/about#esoto" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/6b7251e90b207b31d9932898378249cb" alt="" width="100" height="100" class="user-avatar"></a></li><li><a href="https://www.raywenderlich.com/about#mbriscoe" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/1884b6741815b80fcd8e1d8049036883" alt="" width="100" height="100" class="user-avatar"></a></li></ul><p>... <a href="https://www.raywenderlich.com/about#abt_tut-macos" sl-processed="1">11 total!</a></p><h2>Unity Team</h2><ul><li><a href="https://www.raywenderlich.com/about#auccello" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/c1add2ff230213b25de9d56e8f77b97b" alt="" width="100" height="100" class="user-avatar"></a></li><li><a href="https://www.raywenderlich.com/about#jfisher" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/4130f53141ff249692b920a0721b100e" alt="" width="100" height="100" class="user-avatar"></a></li><li><a href="https://www.raywenderlich.com/about#mplaczek" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/1ea09789220d27317a459bad2167a1ff" alt="" width="100" height="100" class="user-avatar"></a></li></ul><p>... <a href="https://www.raywenderlich.com/about#abt_tut-unity" sl-processed="1">11 total!</a></p><h2>Articles Team</h2><ul><li><a href="https://www.raywenderlich.com/about#flaso-marsetti" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/2f6d7bae859186af2b983677df380198" alt="" width="100" height="100" class="user-avatar"></a></li><li><a href="https://www.raywenderlich.com/about#ttran" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/e6b0f74f6b0294fed6edb668acab8c2c" alt="" width="100" height="100" class="user-avatar"></a></li><li><a href="https://www.raywenderlich.com/about#kmanglani" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/9dfd6787029d68047fe1efa189e96f73" alt="" width="100" height="100" class="user-avatar"></a></li></ul><p>... <a href="https://www.raywenderlich.com/about#abt_article" sl-processed="1">12 total!</a></p><h2>Resident Authors Team</h2><ul><li><a href="https://www.raywenderlich.com/about#mmorey" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/2345435ebf5920b1d600b7ee7d2221a1" alt="" width="100" height="100" class="user-avatar"></a></li><li><a href="https://www.raywenderlich.com/about#sazarpour" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/e648688d01ce5abcfa51e4cfcf5ae28c" alt="" width="100" height="100" class="user-avatar"></a></li><li><a href="https://www.raywenderlich.com/about#afurrow" sl-processed="1"><img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/0ebf471a3ae8df42a84f93a7efbbdbd0" alt="" width="100" height="100" class="user-avatar"></a></li></ul><p>... <a href="https://www.raywenderlich.com/about#abt_resident-authors" sl-processed="1">15 total!</a></p>		</div>
	</section>
</section>
</div>
</div>
		<footer id="main-footer">
      <div class="block">    
        <div class="top-row">
          <a href="https://www.raywenderlich.com/" class="logo-mark" aria-label="Home" sl-processed="1"></a>
          <ul class="footer-nav">
            <li><a href="https://www.raywenderlich.com/104320/open-call-for-writers-and-editors" sl-processed="1">Write For Us</a></li>
            <li><a href="http://rwdevcon.com/" sl-processed="1">RWDevCon</a></li>
            <li><a href="https://store.raywenderlich.com/faq" sl-processed="1">FAQ</a></li>
            <li><a href="https://www.raywenderlich.com/advertise" sl-processed="1">Advertise</a></li>
            <li><a href="https://www.raywenderlich.com/contact" sl-processed="1">Contact</a></li>
          </ul>
          <ul class="social-media-links">
            <li><a href="https://www.facebook.com/raywenderlich" aria-label="Follow us on facebook" sl-processed="1"><i class="icon-facebook-icon" aria-hidden="true"></i><span>12k+ Facebook likes</span></a></li>
            <li><a href="https://twitter.com/rwenderlich" aria-label="Follow us on Twitter" sl-processed="1"><i class="icon-twitter-icon" aria-hidden="true"></i><span>57k+ Twitter followers</span></a></li>
          </ul>
        </div>

        <div class="middle-row">
          <div class="col screencast-col">
            <div class="img-holder">
            	<img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/subscribe-footer@2x.png" alt="">
            </div>  
            <div class="content-holder">
              <span>Screencasts &amp; Video Tutorials</span>
              <a class="no-link">Join over 4,000 subscribers!</a>
              <p>Keep your Swift &amp; iOS skills up-to-date via hands-on tutorials — in video form! The largest collection of Swift &amp; iOS video tutorials anywhere.</p>
              <a class="cta-to-subscribe" href="https://store.raywenderlich.com/products/subscription" sl-processed="1">Learn more</a>
            </div>
          </div>
          <div class="col newsletter-col">
            <div class="img-holder">
            	<img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/image-rwweekly@2x.png" alt="Ray Wenderlich Weekly Development Newsletter">
            </div>
            <div class="content-holder">
            <span>Join 70,000+ Developers</span>
                <a>raywenderlich.com weekly</a>
                <p>Sign up to receive the latest tutorials from raywenderlich.com each week, and receive a free epic-length tutorial as a bonus!</p>
                <form action="https://raywenderlich.us1.list-manage.com/subscribe/post?u=1bc8e630b1599df629818e59b&amp;id=83b6edc87f" method="post" class="newsletter-signup-footer validate" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" target="_blank" novalidate="">
                <input type="email" id="mce-EMAIL" name="EMAIL" placeholder="EMAIL">
                <button type="submit">Sign up</button>
              </form>
            </div>
          </div>
        </div>

      </div>

      <div id="gearbox">
        <div class="block">
          <div id="left-gears">
            <img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/gear_small.svg" class="clockwise-motion small-gear gears" id="gear1" alt="">
            <img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/gear_medium.svg" class="counter-clockwise-motion  medium-gear gears" id="gear2" alt="">
            <img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/gear_large.svg" class="clockwise-motion large-gear gears" id="gear3" alt="">
            <img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/gear_medium.svg" class="counter-clockwise-motion medium-gear gears" id="gear4" alt="">
          </div>

          <ul class="footer-small-links">
            <li><span>© 2016 Razeware LLC. All rights reserved.</span></li>
          </ul>

          <div id="right-gears">
            <img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/gear_small.svg" class="clockwise-motion small-gear gears" id="gear5" alt="">
            <img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/gear_medium.svg" class="counter-clockwise-motion  medium-gear gears" id="gear6" alt="">
            <img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/gear_large.svg" class="clockwise-motion large-gear gears" id="gear7" alt="">
            <img src="./Grand Central Dispatch In-Depth_ Part 1_2_files/gear_medium.svg" class="counter-clockwise-motion medium-gear gears" id="gear8" alt="">
          </div>
        </div>
      </div>
    </footer>

    <!--

                                               _           _ _      _     
                                              | |         | (_)    | |    
      _ __ __ _ _   _  __      _____ _ __   __| | ___ _ __| |_  ___| |__  
     | '__/ _` | | | | \ \ /\ / / _ \ '_ \ / _` |/ _ \ '__| | |/ __| '_ \ 
     | | | (_| | |_| |  \ V  V /  __/ | | | (_| |  __/ |  | | | (__| | | |
     |_|  \__,_|\__, |   \_/\_/ \___|_| |_|\__,_|\___|_|  |_|_|\___|_| |_|
                 __/ |                                                    
                |___/                                                     

    -->

		<script type="text/javascript" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/widgets.js"></script>
<script type="text/javascript" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/highlight.pack.js"></script>
<script type="text/javascript" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/code_highlighting.js"></script>
<script type="text/javascript" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/wp-embed.min.js"></script>
		
		<script type="text/javascript">var _merchantSettings=_merchantSettings || [];_merchantSettings.push(['AT', '11ld4k']);(function(){var autolink=document.createElement('script');autolink.type='text/javascript';autolink.async=true; autolink.src='https://autolinkmaker.itunes.apple.com/js/itunes_autolinkmaker.js';var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(autolink, s);})();</script>
		<script>
			if (jQuery.browser.msie) { jQuery("html").addClass("msie"); }
			if (typeof window.chrome === "object") { jQuery("html").addClass("chrome"); }
		</script>
	


<div class="swiftype-widget"><div class="autocomplete" style="position: absolute; z-index: 9999; top: 45px; left: 0px; width: 98px; display: none;"><ul></ul></div></div><div id="fb-root" class=" fb_reset"><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div><iframe name="fb_xdm_frame_https" frameborder="0" allowtransparency="true" allowfullscreen="true" scrolling="no" id="fb_xdm_frame_https" aria-hidden="true" title="Facebook Cross Domain Communication Frame" tabindex="-1" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/0F7S7QWJ0Ac.html" style="border: none;"></iframe></div></div><div style="position: absolute; top: -10000px; height: 0px; width: 0px;"><div></div></div></div><div id="onesignal-bell-container" class="onesignal-bell-container onesignal-reset onesignal-bell-container-bottom-right"><div id="onesignal-bell-launcher" class="onesignal-bell-launcher onesignal-bell-launcher-md onesignal-bell-launcher-bottom-right onesignal-bell-launcher-theme-default onesignal-bell-launcher-active"><div class="onesignal-bell-launcher-button"><svg class="onesignal-bell-svg" xmlns="http://www.w3.org/2000/svg" width="99.7" height="99.7" viewBox="0 0 99.7 99.7" style="filter: drop-shadow(0 2px 4px rgba(34,36,38,0.35));; -webkit-filter: drop-shadow(0 2px 4px rgba(34,36,38,0.35));;"><circle class="background" cx="49.9" cy="49.9" r="49.9" style="fill: rgb(0, 104, 55);"></circle><path class="foreground" d="M50.1 66.2H27.7s-2-.2-2-2.1c0-1.9 1.7-2 1.7-2s6.7-3.2 6.7-5.5S33 52.7 33 43.3s6-16.6 13.2-16.6c0 0 1-2.4 3.9-2.4 2.8 0 3.8 2.4 3.8 2.4 7.2 0 13.2 7.2 13.2 16.6s-1 11-1 13.3c0 2.3 6.7 5.5 6.7 5.5s1.7.1 1.7 2c0 1.8-2.1 2.1-2.1 2.1H50.1zm-7.2 2.3h14.5s-1 6.3-7.2 6.3-7.3-6.3-7.3-6.3z"></path><ellipse class="stroke" cx="49.9" cy="49.9" rx="37.4" ry="36.9"></ellipse></svg></div><div class="onesignal-bell-launcher-badge" style="filter: drop-shadow(0 2px 4px rgba(34,36,38,0));; -webkit-filter: drop-shadow(0 2px 4px rgba(34,36,38,0));;"></div><div class="onesignal-bell-launcher-message"><div class="onesignal-bell-launcher-message-body"></div></div><div class="onesignal-bell-launcher-dialog" style="filter: drop-shadow(0px 2px 2px rgba(34,36,38,.15));; -webkit-filter: drop-shadow(0px 2px 2px rgba(34,36,38,.15));;"><div class="onesignal-bell-launcher-dialog-body"></div></div></div></div><iframe id="rufous-sandbox" scrolling="no" frameborder="0" allowtransparency="true" allowfullscreen="true" style="position: absolute; visibility: hidden; display: none; width: 0px; height: 0px; padding: 0px; border: none;" title="Twitter analytics iframe" src="./Grand Central Dispatch In-Depth_ Part 1_2_files/saved_resource.html"></iframe></body></html>